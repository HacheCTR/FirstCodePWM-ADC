
Estancia1Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005418  08005418  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08005418  08005418  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005418  08005418  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000024  08005444  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005444  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145e0  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002591  00000000  00000000  00034634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001178  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00037d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002041c  00000000  00000000  00038d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e90d  00000000  00000000  0005919c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d558a  00000000  00000000  00067aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  0013d0b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080053f0 	.word	0x080053f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	080053f0 	.word	0x080053f0

08000218 <vConvertIntToASCII>:
 * the value of &hadc in ASCCI code reading
 * units, tens, hundreds and thousands of the
 * variable u16Adc1
 */
void vConvertIntToASCII(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	u16Adc1 			 = HAL_ADC_GetValue(&hadc1);
 800021c:	4834      	ldr	r0, [pc, #208]	; (80002f0 <vConvertIntToASCII+0xd8>)
 800021e:	f002 f849 	bl	80022b4 <HAL_ADC_GetValue>
 8000222:	4603      	mov	r3, r0
 8000224:	b29a      	uxth	r2, r3
 8000226:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <vConvertIntToASCII+0xdc>)
 8000228:	801a      	strh	r2, [r3, #0]
	u8Percentage = (u16Adc1 * 100) / 4095;									    //Converting ADC to Percentage
 800022a:	4b32      	ldr	r3, [pc, #200]	; (80002f4 <vConvertIntToASCII+0xdc>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	2364      	movs	r3, #100	; 0x64
 8000232:	fb03 f302 	mul.w	r3, r3, r2
 8000236:	4a30      	ldr	r2, [pc, #192]	; (80002f8 <vConvertIntToASCII+0xe0>)
 8000238:	fb82 1203 	smull	r1, r2, r2, r3
 800023c:	441a      	add	r2, r3
 800023e:	12d2      	asrs	r2, r2, #11
 8000240:	17db      	asrs	r3, r3, #31
 8000242:	1ad3      	subs	r3, r2, r3
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <vConvertIntToASCII+0xe4>)
 8000248:	701a      	strb	r2, [r3, #0]
	u8Hundreds   = (u8Percentage) / 100;										//Obtaining Hundreds
 800024a:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <vConvertIntToASCII+0xe4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <vConvertIntToASCII+0xe8>)
 8000250:	fba2 2303 	umull	r2, r3, r2, r3
 8000254:	095b      	lsrs	r3, r3, #5
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <vConvertIntToASCII+0xec>)
 800025a:	701a      	strb	r2, [r3, #0]
	u8Tens  	 = (u8Percentage - (u8Hundreds * 100)) / 10;					//Obtaining Tens
 800025c:	4b27      	ldr	r3, [pc, #156]	; (80002fc <vConvertIntToASCII+0xe4>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	461a      	mov	r2, r3
 8000262:	4b28      	ldr	r3, [pc, #160]	; (8000304 <vConvertIntToASCII+0xec>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4619      	mov	r1, r3
 8000268:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800026c:	fb03 f301 	mul.w	r3, r3, r1
 8000270:	4413      	add	r3, r2
 8000272:	4a25      	ldr	r2, [pc, #148]	; (8000308 <vConvertIntToASCII+0xf0>)
 8000274:	fb82 1203 	smull	r1, r2, r2, r3
 8000278:	1092      	asrs	r2, r2, #2
 800027a:	17db      	asrs	r3, r3, #31
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b22      	ldr	r3, [pc, #136]	; (800030c <vConvertIntToASCII+0xf4>)
 8000282:	701a      	strb	r2, [r3, #0]
	u8Units		 = (u8Percentage - (u8Hundreds * 100 + u8Tens * 10));			//Obtaining Units
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <vConvertIntToASCII+0xe4>)
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <vConvertIntToASCII+0xec>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4619      	mov	r1, r3
 800028e:	0089      	lsls	r1, r1, #2
 8000290:	440b      	add	r3, r1
 8000292:	4619      	mov	r1, r3
 8000294:	0088      	lsls	r0, r1, #2
 8000296:	4619      	mov	r1, r3
 8000298:	4603      	mov	r3, r0
 800029a:	440b      	add	r3, r1
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	b2d9      	uxtb	r1, r3
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <vConvertIntToASCII+0xf4>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	0080      	lsls	r0, r0, #2
 80002a8:	4403      	add	r3, r0
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	440b      	add	r3, r1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <vConvertIntToASCII+0xf8>)
 80002b8:	701a      	strb	r2, [r3, #0]

	vConvertToASCII();
 80002ba:	f000 f82d 	bl	8000318 <vConvertToASCII>

	//The array is used to send to LCD the ASCII numbers.

	au8TextPot[0] = u8Hundreds;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <vConvertIntToASCII+0xec>)
 80002c0:	781a      	ldrb	r2, [r3, #0]
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <vConvertIntToASCII+0xfc>)
 80002c4:	701a      	strb	r2, [r3, #0]
	au8TextPot[1] = u8Tens;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <vConvertIntToASCII+0xf4>)
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <vConvertIntToASCII+0xfc>)
 80002cc:	705a      	strb	r2, [r3, #1]
	au8TextPot[2] = u8Units;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <vConvertIntToASCII+0xf8>)
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <vConvertIntToASCII+0xfc>)
 80002d4:	709a      	strb	r2, [r3, #2]
	au8TextPot[3] = 0x25;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <vConvertIntToASCII+0xfc>)
 80002d8:	2225      	movs	r2, #37	; 0x25
 80002da:	70da      	strb	r2, [r3, #3]

	//Calling Functions of LCD.h to print on this

	vLcd_gotoxy(1, 2);
 80002dc:	2102      	movs	r1, #2
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 fc6e 	bl	8000bc0 <vLcd_gotoxy>
	vLcd_puts(au8TextPot, 4);
 80002e4:	2104      	movs	r1, #4
 80002e6:	480b      	ldr	r0, [pc, #44]	; (8000314 <vConvertIntToASCII+0xfc>)
 80002e8:	f000 faec 	bl	80008c4 <vLcd_puts>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000054 	.word	0x20000054
 80002f4:	20000040 	.word	0x20000040
 80002f8:	80080081 	.word	0x80080081
 80002fc:	20000051 	.word	0x20000051
 8000300:	51eb851f 	.word	0x51eb851f
 8000304:	20000050 	.word	0x20000050
 8000308:	66666667 	.word	0x66666667
 800030c:	20000048 	.word	0x20000048
 8000310:	20000052 	.word	0x20000052
 8000314:	2000004c 	.word	0x2000004c

08000318 <vConvertToASCII>:

void vConvertToASCII(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
//-------Calling Functions to Start ADC-------//

	HAL_ADC_Start(&hadc1);
 800031c:	486d      	ldr	r0, [pc, #436]	; (80004d4 <vConvertToASCII+0x1bc>)
 800031e:	f001 fe3d 	bl	8001f9c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000322:	2164      	movs	r1, #100	; 0x64
 8000324:	486b      	ldr	r0, [pc, #428]	; (80004d4 <vConvertToASCII+0x1bc>)
 8000326:	f001 fef5 	bl	8002114 <HAL_ADC_PollForConversion>

//Code to convert to ASCII reading//

	//----HUNDREDS----//

	if(u8Hundreds == 0)
 800032a:	4b6b      	ldr	r3, [pc, #428]	; (80004d8 <vConvertToASCII+0x1c0>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <vConvertToASCII+0x20>
	{
		u8Hundreds = 0x30;
 8000332:	4b69      	ldr	r3, [pc, #420]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000334:	2230      	movs	r2, #48	; 0x30
 8000336:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 1)
 8000338:	4b67      	ldr	r3, [pc, #412]	; (80004d8 <vConvertToASCII+0x1c0>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d102      	bne.n	8000346 <vConvertToASCII+0x2e>
	{
		u8Hundreds = 0x31;
 8000340:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000342:	2231      	movs	r2, #49	; 0x31
 8000344:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 2)
 8000346:	4b64      	ldr	r3, [pc, #400]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d102      	bne.n	8000354 <vConvertToASCII+0x3c>
	{
		u8Hundreds = 0x32;
 800034e:	4b62      	ldr	r3, [pc, #392]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000350:	2232      	movs	r2, #50	; 0x32
 8000352:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 3)
 8000354:	4b60      	ldr	r3, [pc, #384]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d102      	bne.n	8000362 <vConvertToASCII+0x4a>
	{
		u8Hundreds = 0x33;
 800035c:	4b5e      	ldr	r3, [pc, #376]	; (80004d8 <vConvertToASCII+0x1c0>)
 800035e:	2233      	movs	r2, #51	; 0x33
 8000360:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 4)
 8000362:	4b5d      	ldr	r3, [pc, #372]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b04      	cmp	r3, #4
 8000368:	d102      	bne.n	8000370 <vConvertToASCII+0x58>
	{
		u8Hundreds = 0x34;
 800036a:	4b5b      	ldr	r3, [pc, #364]	; (80004d8 <vConvertToASCII+0x1c0>)
 800036c:	2234      	movs	r2, #52	; 0x34
 800036e:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 5)
 8000370:	4b59      	ldr	r3, [pc, #356]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b05      	cmp	r3, #5
 8000376:	d102      	bne.n	800037e <vConvertToASCII+0x66>
	{
		u8Hundreds = 0x35;
 8000378:	4b57      	ldr	r3, [pc, #348]	; (80004d8 <vConvertToASCII+0x1c0>)
 800037a:	2235      	movs	r2, #53	; 0x35
 800037c:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 6)
 800037e:	4b56      	ldr	r3, [pc, #344]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b06      	cmp	r3, #6
 8000384:	d102      	bne.n	800038c <vConvertToASCII+0x74>
	{
		u8Hundreds = 0x36;
 8000386:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000388:	2236      	movs	r2, #54	; 0x36
 800038a:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 7)
 800038c:	4b52      	ldr	r3, [pc, #328]	; (80004d8 <vConvertToASCII+0x1c0>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b07      	cmp	r3, #7
 8000392:	d102      	bne.n	800039a <vConvertToASCII+0x82>
	{
		u8Hundreds = 0x37;
 8000394:	4b50      	ldr	r3, [pc, #320]	; (80004d8 <vConvertToASCII+0x1c0>)
 8000396:	2237      	movs	r2, #55	; 0x37
 8000398:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 8)
 800039a:	4b4f      	ldr	r3, [pc, #316]	; (80004d8 <vConvertToASCII+0x1c0>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b08      	cmp	r3, #8
 80003a0:	d102      	bne.n	80003a8 <vConvertToASCII+0x90>
	{
		u8Hundreds = 0x38;
 80003a2:	4b4d      	ldr	r3, [pc, #308]	; (80004d8 <vConvertToASCII+0x1c0>)
 80003a4:	2238      	movs	r2, #56	; 0x38
 80003a6:	701a      	strb	r2, [r3, #0]
	}
	if(u8Hundreds == 9)
 80003a8:	4b4b      	ldr	r3, [pc, #300]	; (80004d8 <vConvertToASCII+0x1c0>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b09      	cmp	r3, #9
 80003ae:	d102      	bne.n	80003b6 <vConvertToASCII+0x9e>
	{
		u8Hundreds = 0x39;
 80003b0:	4b49      	ldr	r3, [pc, #292]	; (80004d8 <vConvertToASCII+0x1c0>)
 80003b2:	2239      	movs	r2, #57	; 0x39
 80003b4:	701a      	strb	r2, [r3, #0]
	}

	//----TENS----//

	if(u8Tens == 0)
 80003b6:	4b49      	ldr	r3, [pc, #292]	; (80004dc <vConvertToASCII+0x1c4>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d102      	bne.n	80003c4 <vConvertToASCII+0xac>
	{
		u8Tens = 0x30;
 80003be:	4b47      	ldr	r3, [pc, #284]	; (80004dc <vConvertToASCII+0x1c4>)
 80003c0:	2230      	movs	r2, #48	; 0x30
 80003c2:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 1)
 80003c4:	4b45      	ldr	r3, [pc, #276]	; (80004dc <vConvertToASCII+0x1c4>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d102      	bne.n	80003d2 <vConvertToASCII+0xba>
	{
		u8Tens = 0x31;
 80003cc:	4b43      	ldr	r3, [pc, #268]	; (80004dc <vConvertToASCII+0x1c4>)
 80003ce:	2231      	movs	r2, #49	; 0x31
 80003d0:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 2)
 80003d2:	4b42      	ldr	r3, [pc, #264]	; (80004dc <vConvertToASCII+0x1c4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d102      	bne.n	80003e0 <vConvertToASCII+0xc8>
	{
		u8Tens = 0x32;
 80003da:	4b40      	ldr	r3, [pc, #256]	; (80004dc <vConvertToASCII+0x1c4>)
 80003dc:	2232      	movs	r2, #50	; 0x32
 80003de:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 3)
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <vConvertToASCII+0x1c4>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d102      	bne.n	80003ee <vConvertToASCII+0xd6>
	{
		u8Tens = 0x33;
 80003e8:	4b3c      	ldr	r3, [pc, #240]	; (80004dc <vConvertToASCII+0x1c4>)
 80003ea:	2233      	movs	r2, #51	; 0x33
 80003ec:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 4)
 80003ee:	4b3b      	ldr	r3, [pc, #236]	; (80004dc <vConvertToASCII+0x1c4>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d102      	bne.n	80003fc <vConvertToASCII+0xe4>
	{
		u8Tens = 0x34;
 80003f6:	4b39      	ldr	r3, [pc, #228]	; (80004dc <vConvertToASCII+0x1c4>)
 80003f8:	2234      	movs	r2, #52	; 0x34
 80003fa:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 5)
 80003fc:	4b37      	ldr	r3, [pc, #220]	; (80004dc <vConvertToASCII+0x1c4>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b05      	cmp	r3, #5
 8000402:	d102      	bne.n	800040a <vConvertToASCII+0xf2>
	{
		u8Tens = 0x35;
 8000404:	4b35      	ldr	r3, [pc, #212]	; (80004dc <vConvertToASCII+0x1c4>)
 8000406:	2235      	movs	r2, #53	; 0x35
 8000408:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 6)
 800040a:	4b34      	ldr	r3, [pc, #208]	; (80004dc <vConvertToASCII+0x1c4>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b06      	cmp	r3, #6
 8000410:	d102      	bne.n	8000418 <vConvertToASCII+0x100>
	{
		u8Tens = 0x36;
 8000412:	4b32      	ldr	r3, [pc, #200]	; (80004dc <vConvertToASCII+0x1c4>)
 8000414:	2236      	movs	r2, #54	; 0x36
 8000416:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 7)
 8000418:	4b30      	ldr	r3, [pc, #192]	; (80004dc <vConvertToASCII+0x1c4>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b07      	cmp	r3, #7
 800041e:	d102      	bne.n	8000426 <vConvertToASCII+0x10e>
	{
		u8Tens = 0x37;
 8000420:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <vConvertToASCII+0x1c4>)
 8000422:	2237      	movs	r2, #55	; 0x37
 8000424:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 8)
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <vConvertToASCII+0x1c4>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b08      	cmp	r3, #8
 800042c:	d102      	bne.n	8000434 <vConvertToASCII+0x11c>
	{
		u8Tens = 0x38;
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <vConvertToASCII+0x1c4>)
 8000430:	2238      	movs	r2, #56	; 0x38
 8000432:	701a      	strb	r2, [r3, #0]
	}
	if(u8Tens == 9)
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <vConvertToASCII+0x1c4>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b09      	cmp	r3, #9
 800043a:	d102      	bne.n	8000442 <vConvertToASCII+0x12a>
	{
		u8Tens = 0x39;
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <vConvertToASCII+0x1c4>)
 800043e:	2239      	movs	r2, #57	; 0x39
 8000440:	701a      	strb	r2, [r3, #0]
	}

	//----UNITS----//

	if(u8Units == 0)
 8000442:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d102      	bne.n	8000450 <vConvertToASCII+0x138>
	{
		u8Units = 0x30;
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <vConvertToASCII+0x1c8>)
 800044c:	2230      	movs	r2, #48	; 0x30
 800044e:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 1)
 8000450:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d102      	bne.n	800045e <vConvertToASCII+0x146>
	{
		u8Units = 0x31;
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <vConvertToASCII+0x1c8>)
 800045a:	2231      	movs	r2, #49	; 0x31
 800045c:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 2)
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d102      	bne.n	800046c <vConvertToASCII+0x154>
	{
		u8Units = 0x32;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000468:	2232      	movs	r2, #50	; 0x32
 800046a:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 3)
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <vConvertToASCII+0x1c8>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d102      	bne.n	800047a <vConvertToASCII+0x162>
	{
		u8Units = 0x33;
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000476:	2233      	movs	r2, #51	; 0x33
 8000478:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 4)
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <vConvertToASCII+0x1c8>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b04      	cmp	r3, #4
 8000480:	d102      	bne.n	8000488 <vConvertToASCII+0x170>
	{
		u8Units = 0x34;
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000484:	2234      	movs	r2, #52	; 0x34
 8000486:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 5)
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <vConvertToASCII+0x1c8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d102      	bne.n	8000496 <vConvertToASCII+0x17e>
	{
		u8Units = 0x35;
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000492:	2235      	movs	r2, #53	; 0x35
 8000494:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 6)
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <vConvertToASCII+0x1c8>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b06      	cmp	r3, #6
 800049c:	d102      	bne.n	80004a4 <vConvertToASCII+0x18c>
	{
		u8Units = 0x36;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004a0:	2236      	movs	r2, #54	; 0x36
 80004a2:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 7)
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b07      	cmp	r3, #7
 80004aa:	d102      	bne.n	80004b2 <vConvertToASCII+0x19a>
	{
		u8Units = 0x37;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004ae:	2237      	movs	r2, #55	; 0x37
 80004b0:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 8)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b08      	cmp	r3, #8
 80004b8:	d102      	bne.n	80004c0 <vConvertToASCII+0x1a8>
	{
		u8Units = 0x38;
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004bc:	2238      	movs	r2, #56	; 0x38
 80004be:	701a      	strb	r2, [r3, #0]
	}
	if(u8Units == 9)
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b09      	cmp	r3, #9
 80004c6:	d102      	bne.n	80004ce <vConvertToASCII+0x1b6>
	{
		u8Units = 0x39;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <vConvertToASCII+0x1c8>)
 80004ca:	2239      	movs	r2, #57	; 0x39
 80004cc:	701a      	strb	r2, [r3, #0]
	}
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000054 	.word	0x20000054
 80004d8:	20000050 	.word	0x20000050
 80004dc:	20000048 	.word	0x20000048
 80004e0:	20000052 	.word	0x20000052

080004e4 <vLcd_Init>:
#include "adc.h"

//This function is used to start the pins and LCD

void vLcd_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4bcd      	ldr	r3, [pc, #820]	; (8000820 <vLcd_Init+0x33c>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4acc      	ldr	r2, [pc, #816]	; (8000820 <vLcd_Init+0x33c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4bca      	ldr	r3, [pc, #808]	; (8000820 <vLcd_Init+0x33c>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4bc7      	ldr	r3, [pc, #796]	; (8000820 <vLcd_Init+0x33c>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4ac6      	ldr	r2, [pc, #792]	; (8000820 <vLcd_Init+0x33c>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4bc4      	ldr	r3, [pc, #784]	; (8000820 <vLcd_Init+0x33c>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4bc1      	ldr	r3, [pc, #772]	; (8000820 <vLcd_Init+0x33c>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4ac0      	ldr	r2, [pc, #768]	; (8000820 <vLcd_Init+0x33c>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4bbe      	ldr	r3, [pc, #760]	; (8000820 <vLcd_Init+0x33c>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	GPIO_InitStruct.Pin 	 = RS_PIN;
 8000532:	2304      	movs	r3, #4
 8000534:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(RS_GPIO_PORT, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	48b6      	ldr	r0, [pc, #728]	; (8000824 <vLcd_Init+0x340>)
 800054a:	f002 fcb5 	bl	8002eb8 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin 	 = WR_PIN;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WR_GPIO_PORT, &GPIO_InitStruct);
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4619      	mov	r1, r3
 8000566:	48af      	ldr	r0, [pc, #700]	; (8000824 <vLcd_Init+0x340>)
 8000568:	f002 fca6 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = E_PIN;
 800056c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000570:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 800057a:	2302      	movs	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(E_GPIO_PORT, &GPIO_InitStruct);
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f002 fc96 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D0_PIN;
 800058c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000590:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D0_GPIO_PORT, &GPIO_InitStruct);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f002 fc86 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D1_PIN;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D1_GPIO_PORT, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f002 fc76 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D2_PIN;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D2_GPIO_PORT, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	488f      	ldr	r0, [pc, #572]	; (8000824 <vLcd_Init+0x340>)
 80005e6:	f002 fc67 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D3_PIN;
 80005ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D3_GPIO_PORT, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	4888      	ldr	r0, [pc, #544]	; (8000824 <vLcd_Init+0x340>)
 8000604:	f002 fc58 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D4_PIN;
 8000608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800060c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D4_GPIO_PORT, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	4880      	ldr	r0, [pc, #512]	; (8000824 <vLcd_Init+0x340>)
 8000622:	f002 fc49 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin    	 = D5_PIN;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D5_GPIO_PORT, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4879      	ldr	r0, [pc, #484]	; (8000824 <vLcd_Init+0x340>)
 800063e:	f002 fc3b 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D6_PIN;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D6_GPIO_PORT, &GPIO_InitStruct);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4619      	mov	r1, r3
 8000658:	4872      	ldr	r0, [pc, #456]	; (8000824 <vLcd_Init+0x340>)
 800065a:	f002 fc2d 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = D7_PIN;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D7_GPIO_PORT, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	486c      	ldr	r0, [pc, #432]	; (8000828 <vLcd_Init+0x344>)
 8000676:	f002 fc1f 	bl	8002eb8 <HAL_GPIO_Init>

	//Configurations about initialization according to the datasheet

	E_OFF; WR_OFF; RS_OFF; D7_OFF; D6_OFF; D5_OFF; D4_OFF; D3_OFF; D2_OFF; D1_OFF; D0_OFF;
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f002 fdb2 	bl	80031ec <HAL_GPIO_WritePin>
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	4865      	ldr	r0, [pc, #404]	; (8000824 <vLcd_Init+0x340>)
 8000690:	f002 fdac 	bl	80031ec <HAL_GPIO_WritePin>
 8000694:	2200      	movs	r2, #0
 8000696:	2104      	movs	r1, #4
 8000698:	4862      	ldr	r0, [pc, #392]	; (8000824 <vLcd_Init+0x340>)
 800069a:	f002 fda7 	bl	80031ec <HAL_GPIO_WritePin>
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	4861      	ldr	r0, [pc, #388]	; (8000828 <vLcd_Init+0x344>)
 80006a4:	f002 fda2 	bl	80031ec <HAL_GPIO_WritePin>
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	485d      	ldr	r0, [pc, #372]	; (8000824 <vLcd_Init+0x340>)
 80006ae:	f002 fd9d 	bl	80031ec <HAL_GPIO_WritePin>
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	485b      	ldr	r0, [pc, #364]	; (8000824 <vLcd_Init+0x340>)
 80006b8:	f002 fd98 	bl	80031ec <HAL_GPIO_WritePin>
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4858      	ldr	r0, [pc, #352]	; (8000824 <vLcd_Init+0x340>)
 80006c4:	f002 fd92 	bl	80031ec <HAL_GPIO_WritePin>
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	4855      	ldr	r0, [pc, #340]	; (8000824 <vLcd_Init+0x340>)
 80006d0:	f002 fd8c 	bl	80031ec <HAL_GPIO_WritePin>
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	4852      	ldr	r0, [pc, #328]	; (8000824 <vLcd_Init+0x340>)
 80006dc:	f002 fd86 	bl	80031ec <HAL_GPIO_WritePin>
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f002 fd7f 	bl	80031ec <HAL_GPIO_WritePin>
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f002 fd78 	bl	80031ec <HAL_GPIO_WritePin>

	HAL_Delay(20);
 80006fc:	2014      	movs	r0, #20
 80006fe:	f001 f877 	bl	80017f0 <HAL_Delay>

	//---------one------
	D7_OFF; D6_OFF; D5_ON; D4_ON; D3_OFF; D2_OFF; D1_OFF; D0_OFF;
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	4848      	ldr	r0, [pc, #288]	; (8000828 <vLcd_Init+0x344>)
 8000708:	f002 fd70 	bl	80031ec <HAL_GPIO_WritePin>
 800070c:	2200      	movs	r2, #0
 800070e:	2102      	movs	r1, #2
 8000710:	4844      	ldr	r0, [pc, #272]	; (8000824 <vLcd_Init+0x340>)
 8000712:	f002 fd6b 	bl	80031ec <HAL_GPIO_WritePin>
 8000716:	2201      	movs	r2, #1
 8000718:	2101      	movs	r1, #1
 800071a:	4842      	ldr	r0, [pc, #264]	; (8000824 <vLcd_Init+0x340>)
 800071c:	f002 fd66 	bl	80031ec <HAL_GPIO_WritePin>
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	483f      	ldr	r0, [pc, #252]	; (8000824 <vLcd_Init+0x340>)
 8000728:	f002 fd60 	bl	80031ec <HAL_GPIO_WritePin>
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	483c      	ldr	r0, [pc, #240]	; (8000824 <vLcd_Init+0x340>)
 8000734:	f002 fd5a 	bl	80031ec <HAL_GPIO_WritePin>
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	4839      	ldr	r0, [pc, #228]	; (8000824 <vLcd_Init+0x340>)
 8000740:	f002 fd54 	bl	80031ec <HAL_GPIO_WritePin>
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f002 fd4d 	bl	80031ec <HAL_GPIO_WritePin>
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f002 fd46 	bl	80031ec <HAL_GPIO_WritePin>
	E_ON;
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f002 fd3f 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800076e:	2014      	movs	r0, #20
 8000770:	f001 f83e 	bl	80017f0 <HAL_Delay>
	E_OFF;
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f002 fd35 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000782:	2014      	movs	r0, #20
 8000784:	f001 f834 	bl	80017f0 <HAL_Delay>

	//-----------two-----------
	D7_OFF; D6_OFF; D5_ON; D4_ON; D3_OFF; D2_OFF; D1_OFF; D0_OFF;
 8000788:	2200      	movs	r2, #0
 800078a:	2101      	movs	r1, #1
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <vLcd_Init+0x344>)
 800078e:	f002 fd2d 	bl	80031ec <HAL_GPIO_WritePin>
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <vLcd_Init+0x340>)
 8000798:	f002 fd28 	bl	80031ec <HAL_GPIO_WritePin>
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	4820      	ldr	r0, [pc, #128]	; (8000824 <vLcd_Init+0x340>)
 80007a2:	f002 fd23 	bl	80031ec <HAL_GPIO_WritePin>
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	481d      	ldr	r0, [pc, #116]	; (8000824 <vLcd_Init+0x340>)
 80007ae:	f002 fd1d 	bl	80031ec <HAL_GPIO_WritePin>
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	481a      	ldr	r0, [pc, #104]	; (8000824 <vLcd_Init+0x340>)
 80007ba:	f002 fd17 	bl	80031ec <HAL_GPIO_WritePin>
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <vLcd_Init+0x340>)
 80007c6:	f002 fd11 	bl	80031ec <HAL_GPIO_WritePin>
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f002 fd0a 	bl	80031ec <HAL_GPIO_WritePin>
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f002 fd03 	bl	80031ec <HAL_GPIO_WritePin>
	E_ON;
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f002 fcfc 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80007f4:	20c8      	movs	r0, #200	; 0xc8
 80007f6:	f000 fffb 	bl	80017f0 <HAL_Delay>
	E_OFF;
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f002 fcf2 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000808:	20c8      	movs	r0, #200	; 0xc8
 800080a:	f000 fff1 	bl	80017f0 <HAL_Delay>

	//-------three-------------
	D7_OFF; D6_OFF; D5_ON; D4_ON; D3_OFF; D2_OFF; D1_OFF; D0_OFF;
 800080e:	2200      	movs	r2, #0
 8000810:	2101      	movs	r1, #1
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <vLcd_Init+0x344>)
 8000814:	f002 fcea 	bl	80031ec <HAL_GPIO_WritePin>
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	e006      	b.n	800082c <vLcd_Init+0x348>
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000
 8000824:	48000800 	.word	0x48000800
 8000828:	48000400 	.word	0x48000400
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <vLcd_Init+0x3dc>)
 800082e:	f002 fcdd 	bl	80031ec <HAL_GPIO_WritePin>
 8000832:	2201      	movs	r2, #1
 8000834:	2101      	movs	r1, #1
 8000836:	4822      	ldr	r0, [pc, #136]	; (80008c0 <vLcd_Init+0x3dc>)
 8000838:	f002 fcd8 	bl	80031ec <HAL_GPIO_WritePin>
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000842:	481f      	ldr	r0, [pc, #124]	; (80008c0 <vLcd_Init+0x3dc>)
 8000844:	f002 fcd2 	bl	80031ec <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <vLcd_Init+0x3dc>)
 8000850:	f002 fccc 	bl	80031ec <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <vLcd_Init+0x3dc>)
 800085c:	f002 fcc6 	bl	80031ec <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f002 fcbf 	bl	80031ec <HAL_GPIO_WritePin>
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f002 fcb8 	bl	80031ec <HAL_GPIO_WritePin>
	E_ON;
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f002 fcb1 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800088a:	20c8      	movs	r0, #200	; 0xc8
 800088c:	f000 ffb0 	bl	80017f0 <HAL_Delay>
	E_OFF;
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f002 fca7 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800089e:	20c8      	movs	r0, #200	; 0xc8
 80008a0:	f000 ffa6 	bl	80017f0 <HAL_Delay>

	//-----FUNCTION 8--------
	vLcd_command(LCD_FUNCTIONSET);
 80008a4:	2038      	movs	r0, #56	; 0x38
 80008a6:	f000 f8db 	bl	8000a60 <vLcd_command>
	//-----DISPLAY ON--------
	vLcd_command(DISPLAYON);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f8d8 	bl	8000a60 <vLcd_command>
	//-----Clear display
	vLcd_command(CLEAR_DISPLAY);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f000 f8d5 	bl	8000a60 <vLcd_command>
}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	48000800 	.word	0x48000800

080008c4 <vLcd_puts>:



void vLcd_puts(unsigned char *data, unsigned char nBytes){    //Outputs string to LCD
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	unsigned char i=0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<nBytes; i++){    // print data
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e009      	b.n	80008ee <vLcd_puts+0x2a>
		vLcd_putc(data[i]);
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f80c 	bl	8000900 <vLcd_putc>
	for(i=0; i<nBytes; i++){    // print data
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	3301      	adds	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3f1      	bcc.n	80008da <vLcd_puts+0x16>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <vLcd_putc>:

void vLcd_putc(unsigned char ch){		//Sends Char to LCD
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]

	RS_ON;
 800090a:	2201      	movs	r2, #1
 800090c:	2104      	movs	r1, #4
 800090e:	4852      	ldr	r0, [pc, #328]	; (8000a58 <vLcd_putc+0x158>)
 8000910:	f002 fc6c 	bl	80031ec <HAL_GPIO_WritePin>
	if ( (ch) & (BIT_ZERO) ) {
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d007      	beq.n	800092e <vLcd_putc+0x2e>
		D0_ON;
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f002 fc60 	bl	80031ec <HAL_GPIO_WritePin>
 800092c:	e006      	b.n	800093c <vLcd_putc+0x3c>
	} else {
		D0_OFF;
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f002 fc58 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_ONE) ) {
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <vLcd_putc+0x56>
		D1_ON;
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f002 fc4c 	bl	80031ec <HAL_GPIO_WritePin>
 8000954:	e006      	b.n	8000964 <vLcd_putc+0x64>
	} else {
		D1_OFF;
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f002 fc44 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_TWO) ) {
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <vLcd_putc+0x7c>
		D2_ON;
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000974:	4838      	ldr	r0, [pc, #224]	; (8000a58 <vLcd_putc+0x158>)
 8000976:	f002 fc39 	bl	80031ec <HAL_GPIO_WritePin>
 800097a:	e005      	b.n	8000988 <vLcd_putc+0x88>
	} else {
		D2_OFF;
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000982:	4835      	ldr	r0, [pc, #212]	; (8000a58 <vLcd_putc+0x158>)
 8000984:	f002 fc32 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_THREE) ) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <vLcd_putc+0xa0>
		D3_ON;
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000998:	482f      	ldr	r0, [pc, #188]	; (8000a58 <vLcd_putc+0x158>)
 800099a:	f002 fc27 	bl	80031ec <HAL_GPIO_WritePin>
 800099e:	e005      	b.n	80009ac <vLcd_putc+0xac>
	} else {
		D3_OFF;
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a6:	482c      	ldr	r0, [pc, #176]	; (8000a58 <vLcd_putc+0x158>)
 80009a8:	f002 fc20 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_FOUR) ) {
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <vLcd_putc+0xc4>
		D4_ON;
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009bc:	4826      	ldr	r0, [pc, #152]	; (8000a58 <vLcd_putc+0x158>)
 80009be:	f002 fc15 	bl	80031ec <HAL_GPIO_WritePin>
 80009c2:	e005      	b.n	80009d0 <vLcd_putc+0xd0>
	} else {
		D4_OFF;
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ca:	4823      	ldr	r0, [pc, #140]	; (8000a58 <vLcd_putc+0x158>)
 80009cc:	f002 fc0e 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_FIVE) ) {
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 0320 	and.w	r3, r3, #32
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <vLcd_putc+0xe6>
		D5_ON;
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	481e      	ldr	r0, [pc, #120]	; (8000a58 <vLcd_putc+0x158>)
 80009e0:	f002 fc04 	bl	80031ec <HAL_GPIO_WritePin>
 80009e4:	e004      	b.n	80009f0 <vLcd_putc+0xf0>
	} else {
		D5_OFF;
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	481b      	ldr	r0, [pc, #108]	; (8000a58 <vLcd_putc+0x158>)
 80009ec:	f002 fbfe 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_SIX) ) {
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d005      	beq.n	8000a06 <vLcd_putc+0x106>
		D6_ON;
 80009fa:	2201      	movs	r2, #1
 80009fc:	2102      	movs	r1, #2
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <vLcd_putc+0x158>)
 8000a00:	f002 fbf4 	bl	80031ec <HAL_GPIO_WritePin>
 8000a04:	e004      	b.n	8000a10 <vLcd_putc+0x110>
	} else {
		D6_OFF;
 8000a06:	2200      	movs	r2, #0
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4813      	ldr	r0, [pc, #76]	; (8000a58 <vLcd_putc+0x158>)
 8000a0c:	f002 fbee 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (ch) & (BIT_SEVEN) ) {
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	da05      	bge.n	8000a24 <vLcd_putc+0x124>
		D7_ON;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	480f      	ldr	r0, [pc, #60]	; (8000a5c <vLcd_putc+0x15c>)
 8000a1e:	f002 fbe5 	bl	80031ec <HAL_GPIO_WritePin>
 8000a22:	e004      	b.n	8000a2e <vLcd_putc+0x12e>
	} else {
		D7_OFF;
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <vLcd_putc+0x15c>)
 8000a2a:	f002 fbdf 	bl	80031ec <HAL_GPIO_WritePin>
	}
	E_ON;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f002 fbd8 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(10);//__delay_us(300);
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f000 fed7 	bl	80017f0 <HAL_Delay>
	E_OFF;
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f002 fbce 	bl	80031ec <HAL_GPIO_WritePin>
	//HAL_Delay(5);//__delay_us(300);
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	48000800 	.word	0x48000800
 8000a5c:	48000400 	.word	0x48000400

08000a60 <vLcd_command>:
void vLcd_command(unsigned char cmd){	//Sends Command to LCD
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]

	RS_OFF;
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4852      	ldr	r0, [pc, #328]	; (8000bb8 <vLcd_command+0x158>)
 8000a70:	f002 fbbc 	bl	80031ec <HAL_GPIO_WritePin>
	if ( (cmd) & (BIT_ZERO) ) {
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <vLcd_command+0x2e>
		D0_ON;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f002 fbb0 	bl	80031ec <HAL_GPIO_WritePin>
 8000a8c:	e006      	b.n	8000a9c <vLcd_command+0x3c>
	} else {
		D0_OFF;
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f002 fba8 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_ONE) ) {
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <vLcd_command+0x56>
		D1_ON;
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f002 fb9c 	bl	80031ec <HAL_GPIO_WritePin>
 8000ab4:	e006      	b.n	8000ac4 <vLcd_command+0x64>
	} else {
		D1_OFF;
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f002 fb94 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_TWO) ) {
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d006      	beq.n	8000adc <vLcd_command+0x7c>
		D2_ON;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <vLcd_command+0x158>)
 8000ad6:	f002 fb89 	bl	80031ec <HAL_GPIO_WritePin>
 8000ada:	e005      	b.n	8000ae8 <vLcd_command+0x88>
	} else {
		D2_OFF;
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae2:	4835      	ldr	r0, [pc, #212]	; (8000bb8 <vLcd_command+0x158>)
 8000ae4:	f002 fb82 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_THREE) ) {
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <vLcd_command+0xa0>
		D3_ON;
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	482f      	ldr	r0, [pc, #188]	; (8000bb8 <vLcd_command+0x158>)
 8000afa:	f002 fb77 	bl	80031ec <HAL_GPIO_WritePin>
 8000afe:	e005      	b.n	8000b0c <vLcd_command+0xac>
	} else {
		D3_OFF;
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b06:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <vLcd_command+0x158>)
 8000b08:	f002 fb70 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_FOUR) ) {
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <vLcd_command+0xc4>
		D4_ON;
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1c:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <vLcd_command+0x158>)
 8000b1e:	f002 fb65 	bl	80031ec <HAL_GPIO_WritePin>
 8000b22:	e005      	b.n	8000b30 <vLcd_command+0xd0>
	} else {
		D4_OFF;
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2a:	4823      	ldr	r0, [pc, #140]	; (8000bb8 <vLcd_command+0x158>)
 8000b2c:	f002 fb5e 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_FIVE) ) {
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 0320 	and.w	r3, r3, #32
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <vLcd_command+0xe6>
		D5_ON;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <vLcd_command+0x158>)
 8000b40:	f002 fb54 	bl	80031ec <HAL_GPIO_WritePin>
 8000b44:	e004      	b.n	8000b50 <vLcd_command+0xf0>
	} else {
		D5_OFF;
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <vLcd_command+0x158>)
 8000b4c:	f002 fb4e 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_SIX) ) {
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d005      	beq.n	8000b66 <vLcd_command+0x106>
		D6_ON;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <vLcd_command+0x158>)
 8000b60:	f002 fb44 	bl	80031ec <HAL_GPIO_WritePin>
 8000b64:	e004      	b.n	8000b70 <vLcd_command+0x110>
	} else {
		D6_OFF;
 8000b66:	2200      	movs	r2, #0
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <vLcd_command+0x158>)
 8000b6c:	f002 fb3e 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if ( (cmd) & (BIT_SEVEN) ) {
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da05      	bge.n	8000b84 <vLcd_command+0x124>
		D7_ON;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	480f      	ldr	r0, [pc, #60]	; (8000bbc <vLcd_command+0x15c>)
 8000b7e:	f002 fb35 	bl	80031ec <HAL_GPIO_WritePin>
 8000b82:	e004      	b.n	8000b8e <vLcd_command+0x12e>
	} else {
		D7_OFF;
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <vLcd_command+0x15c>)
 8000b8a:	f002 fb2f 	bl	80031ec <HAL_GPIO_WritePin>
	}

	E_ON;
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f002 fb28 	bl	80031ec <HAL_GPIO_WritePin>
	HAL_Delay(10);//__delay_us(300);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f000 fe27 	bl	80017f0 <HAL_Delay>
	E_OFF;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f002 fb1e 	bl	80031ec <HAL_GPIO_WritePin>
	//HAL_Delay(1);//__delay_us(300);
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <vLcd_gotoxy>:

//This Functions print on the second line on the LCD

void vLcd_gotoxy(unsigned char x, unsigned char y){		//Cursor to X Y position
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
	register unsigned char DDRAMAddr;

	switch(y){		// remap lines into proper order
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d81b      	bhi.n	8000c10 <vLcd_gotoxy+0x50>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <vLcd_gotoxy+0x20>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000bf9 	.word	0x08000bf9
 8000be8:	08000c01 	.word	0x08000c01
 8000bec:	08000c09 	.word	0x08000c09
	case 1: DDRAMAddr = LCD_LINE0_DDRAMADDR+x-1; break;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	b2dc      	uxtb	r4, r3
 8000bf6:	e00f      	b.n	8000c18 <vLcd_gotoxy+0x58>
	case 2: DDRAMAddr = LCD_LINE1_DDRAMADDR+x-1; break;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	333f      	adds	r3, #63	; 0x3f
 8000bfc:	b2dc      	uxtb	r4, r3
 8000bfe:	e00b      	b.n	8000c18 <vLcd_gotoxy+0x58>
	case 3: DDRAMAddr = LCD_LINE2_DDRAMADDR+x-1; break;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	3313      	adds	r3, #19
 8000c04:	b2dc      	uxtb	r4, r3
 8000c06:	e007      	b.n	8000c18 <vLcd_gotoxy+0x58>
	case 4: DDRAMAddr = LCD_LINE3_DDRAMADDR+x-1; break;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3353      	adds	r3, #83	; 0x53
 8000c0c:	b2dc      	uxtb	r4, r3
 8000c0e:	e003      	b.n	8000c18 <vLcd_gotoxy+0x58>
	default: DDRAMAddr =LCD_LINE0_DDRAMADDR+x-1;break;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	b2dc      	uxtb	r4, r3
 8000c16:	bf00      	nop
	}
	vLcd_command(1<<LCD_DDRAM|DDRAMAddr);	// set data address
 8000c18:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff1e 	bl	8000a60 <vLcd_command>
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}

08000c2c <vInit_Leds>:
uint8_t au8OText [12] = {'O','r','a','n','g','e','L','e','d','O','n'};
uint8_t ButtonStateN;

//Function to start the LEDS Pins and Pushbutton
void vInit_Leds(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <vInit_Leds+0xac>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <vInit_Leds+0xac>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <vInit_Leds+0xac>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <vInit_Leds+0xac>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <vInit_Leds+0xac>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <vInit_Leds+0xac>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <vInit_Leds+0xac>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <vInit_Leds+0xac>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <vInit_Leds+0xac>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	GPIO_InitStruct.Pin 	 = GreenLed_PIN;
 8000c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GreenLed_GPIO_PORT, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	4812      	ldr	r0, [pc, #72]	; (8000cdc <vInit_Leds+0xb0>)
 8000c94:	f002 f910 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = OrangeLed_PIN;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(OrangeLed_GPIO_PORT, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <vInit_Leds+0xb4>)
 8000cb2:	f002 f901 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = PushButton_PIN;
 8000cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_PULLUP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PushButton_GPIO_PORT, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <vInit_Leds+0xb4>)
 8000ccc:	f002 f8f4 	bl	8002eb8 <HAL_GPIO_Init>
}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	48000800 	.word	0x48000800

08000ce4 <vLedFunction>:

//Functions to print the led on and change this with PushButton

void vLedFunction(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	ButtonStateN = HAL_GPIO_ReadPin (PushButton_GPIO_PORT, PushButton_PIN);
 8000ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cec:	484f      	ldr	r0, [pc, #316]	; (8000e2c <vLedFunction+0x148>)
 8000cee:	f002 fa65 	bl	80031bc <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <vLedFunction+0x14c>)
 8000cf8:	701a      	strb	r2, [r3, #0]

	//All this is used to turn on the led green and the led orange in different time

	if (ButtonStateN == 0 && HAL_GPIO_ReadPin (OrangeLed_GPIO_PORT, OrangeLed_PIN)== 0)        //start with green led on
 8000cfa:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <vLedFunction+0x14c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10d      	bne.n	8000d1e <vLedFunction+0x3a>
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	4849      	ldr	r0, [pc, #292]	; (8000e2c <vLedFunction+0x148>)
 8000d08:	f002 fa58 	bl	80031bc <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <vLedFunction+0x3a>
	{
		HAL_GPIO_WritePin(GreenLed_GPIO_PORT, GreenLed_PIN, GPIO_PIN_SET); //green PIN 6
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d18:	4846      	ldr	r0, [pc, #280]	; (8000e34 <vLedFunction+0x150>)
 8000d1a:	f002 fa67 	bl	80031ec <HAL_GPIO_WritePin>
	}
	if((ButtonStateN == 0) && (EstButtonN == 1))                                               //When Buttons is on for the first time
 8000d1e:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <vLedFunction+0x14c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d107      	bne.n	8000d36 <vLedFunction+0x52>
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <vLedFunction+0x154>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <vLedFunction+0x52>
	{
		EstButtonN = false;
 8000d2e:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <vLedFunction+0x154>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e012      	b.n	8000d5c <vLedFunction+0x78>
	}
	else if((ButtonStateN == 1) && (EstButtonN == 0))
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <vLedFunction+0x14c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10e      	bne.n	8000d5c <vLedFunction+0x78>
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <vLedFunction+0x154>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d007      	beq.n	8000d5c <vLedFunction+0x78>
	{

		HAL_GPIO_TogglePin(OrangeLed_GPIO_PORT, OrangeLed_PIN); //pin 8 = green led
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4836      	ldr	r0, [pc, #216]	; (8000e2c <vLedFunction+0x148>)
 8000d52:	f002 fa63 	bl	800321c <HAL_GPIO_TogglePin>
		EstButtonN = true;
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <vLedFunction+0x154>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
	}
	if(ButtonStateN == 1 && HAL_GPIO_ReadPin (OrangeLed_GPIO_PORT, OrangeLed_PIN)== 1 && HAL_GPIO_ReadPin (GreenLed_GPIO_PORT, GreenLed_PIN)== 1)
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <vLedFunction+0x14c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d114      	bne.n	8000d8e <vLedFunction+0xaa>
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4830      	ldr	r0, [pc, #192]	; (8000e2c <vLedFunction+0x148>)
 8000d6a:	f002 fa27 	bl	80031bc <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d10c      	bne.n	8000d8e <vLedFunction+0xaa>
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	482e      	ldr	r0, [pc, #184]	; (8000e34 <vLedFunction+0x150>)
 8000d7a:	f002 fa1f 	bl	80031bc <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d104      	bne.n	8000d8e <vLedFunction+0xaa>
	{
		HAL_GPIO_TogglePin(GreenLed_GPIO_PORT, GreenLed_PIN);
 8000d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d88:	482a      	ldr	r0, [pc, #168]	; (8000e34 <vLedFunction+0x150>)
 8000d8a:	f002 fa47 	bl	800321c <HAL_GPIO_TogglePin>
	}
	if(HAL_GPIO_ReadPin (PushButton_GPIO_PORT, PushButton_PIN) == 1 && HAL_GPIO_ReadPin (OrangeLed_GPIO_PORT, OrangeLed_PIN)== 0 && HAL_GPIO_ReadPin (GreenLed_GPIO_PORT, GreenLed_PIN)== 0)
 8000d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <vLedFunction+0x148>)
 8000d94:	f002 fa12 	bl	80031bc <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d114      	bne.n	8000dc8 <vLedFunction+0xe4>
 8000d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <vLedFunction+0x148>)
 8000da4:	f002 fa0a 	bl	80031bc <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <vLedFunction+0xe4>
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4820      	ldr	r0, [pc, #128]	; (8000e34 <vLedFunction+0x150>)
 8000db4:	f002 fa02 	bl	80031bc <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d104      	bne.n	8000dc8 <vLedFunction+0xe4>
	{
		HAL_GPIO_TogglePin(GreenLed_GPIO_PORT, GreenLed_PIN);
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	481c      	ldr	r0, [pc, #112]	; (8000e34 <vLedFunction+0x150>)
 8000dc4:	f002 fa2a 	bl	800321c <HAL_GPIO_TogglePin>
	}

	// this part of the code is used to print on the lcd witch led is on and off

	if(HAL_GPIO_ReadPin (GreenLed_GPIO_PORT, GreenLed_PIN) == 1 && HAL_GPIO_ReadPin (PushButton_GPIO_PORT, PushButton_PIN) == 1)
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	4819      	ldr	r0, [pc, #100]	; (8000e34 <vLedFunction+0x150>)
 8000dce:	f002 f9f5 	bl	80031bc <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d10f      	bne.n	8000df8 <vLedFunction+0x114>
 8000dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <vLedFunction+0x148>)
 8000dde:	f002 f9ed 	bl	80031bc <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d107      	bne.n	8000df8 <vLedFunction+0x114>
	{
		vLcd_command(CLEAR_DISPLAY);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fe39 	bl	8000a60 <vLcd_command>
		vLcd_puts(au8Text, 11);
 8000dee:	210b      	movs	r1, #11
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <vLedFunction+0x158>)
 8000df2:	f7ff fd67 	bl	80008c4 <vLcd_puts>
	{
		vLcd_command(CLEAR_DISPLAY);
		vLcd_puts(au8OText, 12);

	}
}
 8000df6:	e016      	b.n	8000e26 <vLedFunction+0x142>
	else if(HAL_GPIO_ReadPin (GreenLed_GPIO_PORT, GreenLed_PIN) == 0 && HAL_GPIO_ReadPin (PushButton_GPIO_PORT, PushButton_PIN) == 1)
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <vLedFunction+0x150>)
 8000dfe:	f002 f9dd 	bl	80031bc <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10e      	bne.n	8000e26 <vLedFunction+0x142>
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <vLedFunction+0x148>)
 8000e0e:	f002 f9d5 	bl	80031bc <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d106      	bne.n	8000e26 <vLedFunction+0x142>
		vLcd_command(CLEAR_DISPLAY);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fe21 	bl	8000a60 <vLcd_command>
		vLcd_puts(au8OText, 12);
 8000e1e:	210c      	movs	r1, #12
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <vLedFunction+0x15c>)
 8000e22:	f7ff fd4f 	bl	80008c4 <vLcd_puts>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	20000053 	.word	0x20000053
 8000e34:	48000400 	.word	0x48000400
 8000e38:	20000042 	.word	0x20000042
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	2000000c 	.word	0x2000000c

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fc61 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f81a 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 f9a8 	bl	80011a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e54:	f000 f87e 	bl	8000f54 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e58:	f000 f8f4 	bl	8001044 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	vLcd_Init();
 8000e5c:	f7ff fb42 	bl	80004e4 <vLcd_Init>
	vInit_Leds();
 8000e60:	f7ff fee4 	bl	8000c2c <vInit_Leds>
	vMotor_Init();
 8000e64:	f000 f9ca 	bl	80011fc <vMotor_Init>
	vPwm_Init();
 8000e68:	f000 fa9c 	bl	80013a4 <vPwm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		vLedFunction();
 8000e6c:	f7ff ff3a 	bl	8000ce4 <vLedFunction>
		vDirection();
 8000e70:	f000 fa3e 	bl	80012f0 <vDirection>
		vDecreaseAndCreaseVel();
 8000e74:	f000 fad4 	bl	8001420 <vDecreaseAndCreaseVel>
		vConvertIntToASCII();
 8000e78:	f7ff f9ce 	bl	8000218 <vConvertIntToASCII>
		HAL_Delay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 fcb7 	bl	80017f0 <HAL_Delay>
		vLedFunction();
 8000e82:	e7f3      	b.n	8000e6c <main+0x28>

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0a4      	sub	sp, #144	; 0x90
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e8e:	2238      	movs	r2, #56	; 0x38
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 faa4 	bl	80053e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fa96 	bl	80053e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eb8:	f002 f9ca 	bl	8003250 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000ed6:	2315      	movs	r3, #21
 8000ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fa60 	bl	80033b8 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000efe:	f000 f975 	bl	80011ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2303      	movs	r3, #3
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fd62 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f2a:	f000 f95f 	bl	80011ec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f32:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f34:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 ff37 	bl	8003db0 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f48:	f000 f950 	bl	80011ec <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3790      	adds	r7, #144	; 0x90
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2220      	movs	r2, #32
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fa37 	bl	80053e0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	4817      	ldr	r0, [pc, #92]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fde:	f000 fe55 	bl	8001c8c <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fe8:	f000 f900 	bl	80011ec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <MX_ADC1_Init+0xe8>)
 8000ff8:	f001 fdda 	bl	8002bb0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001002:	f000 f8f3 	bl	80011ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_ADC1_Init+0xec>)
 8001008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	2306      	movs	r3, #6
 800100c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001012:	237f      	movs	r3, #127	; 0x7f
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001016:	2304      	movs	r3, #4
 8001018:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_ADC1_Init+0xe8>)
 8001024:	f001 f954 	bl	80022d0 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800102e:	f000 f8dd 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000054 	.word	0x20000054
 8001040:	14f00020 	.word	0x14f00020

08001044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09c      	sub	sp, #112	; 0x70
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f9ae 	bl	80053e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <MX_TIM1_Init+0x158>)
 8001086:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <MX_TIM1_Init+0x15c>)
 8001088:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <MX_TIM1_Init+0x158>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <MX_TIM1_Init+0x158>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <MX_TIM1_Init+0x158>)
 8001098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <MX_TIM1_Init+0x158>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <MX_TIM1_Init+0x158>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <MX_TIM1_Init+0x158>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b0:	483a      	ldr	r0, [pc, #232]	; (800119c <MX_TIM1_Init+0x158>)
 80010b2:	f003 f86d 	bl	8004190 <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010bc:	f000 f896 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ca:	4619      	mov	r1, r3
 80010cc:	4833      	ldr	r0, [pc, #204]	; (800119c <MX_TIM1_Init+0x158>)
 80010ce:	f003 fb27 	bl	8004720 <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010d8:	f000 f888 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <MX_TIM1_Init+0x158>)
 80010de:	f003 f8ae 	bl	800423e <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010e8:	f000 f880 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fc:	4619      	mov	r1, r3
 80010fe:	4827      	ldr	r0, [pc, #156]	; (800119c <MX_TIM1_Init+0x158>)
 8001100:	f004 f828 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800110a:	f000 f86f 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800112e:	220c      	movs	r2, #12
 8001130:	4619      	mov	r1, r3
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <MX_TIM1_Init+0x158>)
 8001134:	f003 f9e4 	bl	8004500 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800113e:	f000 f855 	bl	80011ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_TIM1_Init+0x158>)
 8001180:	f004 f86a 	bl	8005258 <HAL_TIMEx_ConfigBreakDeadTime>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800118a:	f000 f82f 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <MX_TIM1_Init+0x158>)
 8001190:	f000 fa18 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8001194:	bf00      	nop
 8001196:	3770      	adds	r7, #112	; 0x70
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000c0 	.word	0x200000c0
 80011a0:	40012c00 	.word	0x40012c00

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_GPIO_Init+0x44>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <MX_GPIO_Init+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_GPIO_Init+0x44>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_GPIO_Init+0x44>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <MX_GPIO_Init+0x44>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_GPIO_Init+0x44>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <vMotor_Init>:
static bool EstButton = false;

//THE FUNCTION TAHT INIT THE H BRIDGE AND PUSHBUTTONS PINS

void vMotor_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <vMotor_Init+0xe8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <vMotor_Init+0xe8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <vMotor_Init+0xe8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <vMotor_Init+0xe8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <vMotor_Init+0xe8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <vMotor_Init+0xe8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <vMotor_Init+0xe8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <vMotor_Init+0xe8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <vMotor_Init+0xe8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	GPIO_InitStruct.Pin 	 = Enable_PIN;
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Enable_GPIO_PORT, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <vMotor_Init+0xec>)
 8001264:	f001 fe28 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = Input4_PIN;
 8001268:	2340      	movs	r3, #64	; 0x40
 800126a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Input4_GPIO_PORT, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <vMotor_Init+0xf0>)
 8001280:	f001 fe1a 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = Input3_PIN;
 8001284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001288:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_PULLDOWN;
 800128e:	2302      	movs	r3, #2
 8001290:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Input3_GPIO_PORT, &GPIO_InitStruct);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <vMotor_Init+0xec>)
 800129e:	f001 fe0b 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = PushB_PIN;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_PULLDOWN;
 80012aa:	2302      	movs	r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PushB_GPIO_PORT, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <vMotor_Init+0xec>)
 80012b6:	f001 fdff 	bl	8002eb8 <HAL_GPIO_Init>

	Enable_OFF; Input4_OFF; Input3_OFF;
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <vMotor_Init+0xec>)
 80012c2:	f001 ff93 	bl	80031ec <HAL_GPIO_WritePin>
 80012c6:	2200      	movs	r2, #0
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <vMotor_Init+0xf0>)
 80012cc:	f001 ff8e 	bl	80031ec <HAL_GPIO_WritePin>
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <vMotor_Init+0xec>)
 80012d8:	f001 ff88 	bl	80031ec <HAL_GPIO_WritePin>

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800

080012f0 <vDirection>:

//THIS FUNCTION IS USED TO PUT THE DIRECTION OF THE MOTOR

void vDirection(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	uint8_t u8PushState = HAL_GPIO_ReadPin(PushB_GPIO_PORT, PushB_PIN);
 80012f6:	2102      	movs	r1, #2
 80012f8:	4827      	ldr	r0, [pc, #156]	; (8001398 <vDirection+0xa8>)
 80012fa:	f001 ff5f 	bl	80031bc <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]

	if((u8PushState == 0) && (EstButton == 1))
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d107      	bne.n	8001318 <vDirection+0x28>
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <vDirection+0xac>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <vDirection+0x28>
	{
		EstButton = false;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <vDirection+0xac>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e03b      	b.n	8001390 <vDirection+0xa0>
	}
	else if((u8PushState == 1) && (EstButton == 0))  //TURN MOTOR TO THE RIGHT
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d11b      	bne.n	8001356 <vDirection+0x66>
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <vDirection+0xac>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f083 0301 	eor.w	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d014      	beq.n	8001356 <vDirection+0x66>
	{
		Input3_ON; 					 //input 3
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <vDirection+0xa8>)
 8001334:	f001 ff5a 	bl	80031ec <HAL_GPIO_WritePin>
		Input4_OFF;					 //input 4
 8001338:	2200      	movs	r2, #0
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	4818      	ldr	r0, [pc, #96]	; (80013a0 <vDirection+0xb0>)
 800133e:	f001 ff55 	bl	80031ec <HAL_GPIO_WritePin>
		Enable_ON;  				 //enable
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001348:	4813      	ldr	r0, [pc, #76]	; (8001398 <vDirection+0xa8>)
 800134a:	f001 ff4f 	bl	80031ec <HAL_GPIO_WritePin>
		EstButton = true;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <vDirection+0xac>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e01c      	b.n	8001390 <vDirection+0xa0>
	}
	else if((u8PushState == 1) && (HAL_GPIO_ReadPin(Input3_GPIO_PORT, Input3_PIN)) == 1) //TURN THE MOTOR TO THE LEFT
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d119      	bne.n	8001390 <vDirection+0xa0>
 800135c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <vDirection+0xa8>)
 8001362:	f001 ff2b 	bl	80031bc <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d111      	bne.n	8001390 <vDirection+0xa0>
	{
		Input3_OFF;
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <vDirection+0xa8>)
 8001374:	f001 ff3a 	bl	80031ec <HAL_GPIO_WritePin>
		Input4_ON;
 8001378:	2201      	movs	r2, #1
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <vDirection+0xb0>)
 800137e:	f001 ff35 	bl	80031ec <HAL_GPIO_WritePin>
		Enable_ON;
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <vDirection+0xa8>)
 800138a:	f001 ff2f 	bl	80031ec <HAL_GPIO_WritePin>
	}
}
 800138e:	e7ff      	b.n	8001390 <vDirection+0xa0>
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	48000400 	.word	0x48000400
 800139c:	20000043 	.word	0x20000043
 80013a0:	48000800 	.word	0x48000800

080013a4 <vPwm_Init>:
static uint16_t u16DutyCycle;

//FUNCTON THAT START ALL PINES

void vPwm_Init (void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0


	/* GPIO Ports Clock Enable */


	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <vPwm_Init+0x74>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <vPwm_Init+0x74>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <vPwm_Init+0x74>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <vPwm_Init+0x74>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <vPwm_Init+0x74>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <vPwm_Init+0x74>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 	 = PushButton1_PIN;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PushButton1_GPIO_PORT, &GPIO_InitStruct);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	480b      	ldr	r0, [pc, #44]	; (800141c <vPwm_Init+0x78>)
 80013f0:	f001 fd62 	bl	8002eb8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	 = PushButton2_PIN;
 80013f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	 = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	 = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PushButton2_GPIO_PORT, &GPIO_InitStruct);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <vPwm_Init+0x78>)
 800140a:	f001 fd55 	bl	8002eb8 <HAL_GPIO_Init>
}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400

08001420 <vDecreaseAndCreaseVel>:
/* THIS FUNCITON IS USED TO DECREASE AND CREASE
 * THE VELOCITY OF THE MOTOR USING THE PWM FUNCTION
 * AND A RIGHTBUTTON AND A LEFTBUTTON
 */
void vDecreaseAndCreaseVel (void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	u8RightButtonState = HAL_GPIO_ReadPin(PushButton1_GPIO_PORT, PushButton1_PIN);
 8001424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <vDecreaseAndCreaseVel+0x8c>)
 800142a:	f001 fec7 	bl	80031bc <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <vDecreaseAndCreaseVel+0x90>)
 8001434:	701a      	strb	r2, [r3, #0]
	u8LeftButtonState  = HAL_GPIO_ReadPin(PushButton2_GPIO_PORT, PushButton2_PIN);
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	481c      	ldr	r0, [pc, #112]	; (80014ac <vDecreaseAndCreaseVel+0x8c>)
 800143c:	f001 febe 	bl	80031bc <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <vDecreaseAndCreaseVel+0x94>)
 8001446:	701a      	strb	r2, [r3, #0]
	u16DutyCycle = 0;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800144e:	210c      	movs	r1, #12
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <vDecreaseAndCreaseVel+0x9c>)
 8001452:	f002 ff55 	bl	8004300 <HAL_TIM_PWM_Start>

	//THIS IS USED TO CREASE THE VELOCITY

	if(u8RightButtonState == 1 && u8LeftButtonState == 0)
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <vDecreaseAndCreaseVel+0x90>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10f      	bne.n	800147e <vDecreaseAndCreaseVel+0x5e>
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <vDecreaseAndCreaseVel+0x94>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10b      	bne.n	800147e <vDecreaseAndCreaseVel+0x5e>
	{
		u16DutyCycle += 3000;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 8001472:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, u16DutyCycle);
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <vDecreaseAndCreaseVel+0x9c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
	}

	//THIS IS USED TO DECREASE THE VELOCITY

	if(u8LeftButtonState == 1 && u8RightButtonState == 0)
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <vDecreaseAndCreaseVel+0x94>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10f      	bne.n	80014a6 <vDecreaseAndCreaseVel+0x86>
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <vDecreaseAndCreaseVel+0x90>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10b      	bne.n	80014a6 <vDecreaseAndCreaseVel+0x86>
	{
		u16DutyCycle -= 3000;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 800149a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, u16DutyCycle);
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <vDecreaseAndCreaseVel+0x98>)
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <vDecreaseAndCreaseVel+0x9c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	48000400 	.word	0x48000400
 80014b0:	2000010d 	.word	0x2000010d
 80014b4:	2000010c 	.word	0x2000010c
 80014b8:	20000044 	.word	0x20000044
 80014bc:	200000c0 	.word	0x200000c0

080014c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x44>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6613      	str	r3, [r2, #96]	; 0x60
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x44>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x44>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014f6:	f001 ff4f 	bl	8003398 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001528:	d124      	bne.n	8001574 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_ADC_MspInit+0x74>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800155a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001560:	2303      	movs	r3, #3
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <HAL_ADC_MspInit+0x78>)
 8001570:	f001 fca2 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	48000400 	.word	0x48000400

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_TIM_Base_MspInit+0x38>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10b      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0x3c>)
 800159c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a0:	6613      	str	r3, [r2, #96]	; 0x60
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_TIM_Base_MspInit+0x3c>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40012c00 	.word	0x40012c00
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <HAL_TIM_MspPostInit+0x68>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_TIM_MspPostInit+0x6c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <HAL_TIM_MspPostInit+0x6c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001602:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001610:	230b      	movs	r3, #11
 8001612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f001 fc4b 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40012c00 	.word	0x40012c00
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f894 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SystemInit+0x28>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <SystemInit+0x28>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SystemInit+0x28>)
 80016a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016aa:	609a      	str	r2, [r3, #8]
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:





  ldr   r0, =_estack
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e6:	f7ff ffd3 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f003 fe55 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7ff fba9 	bl	8000e44 <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   r0, =_estack
 80016f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001700:	08005420 	.word	0x08005420
  ldr r2, =_sbss
 8001704:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001708:	20000114 	.word	0x20000114

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f001 fb9b 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f80e 	bl	8001740 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fec6 	bl	80014c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]

}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_InitTick+0x68>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d022      	beq.n	800179a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_InitTick+0x6c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_InitTick+0x68>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001760:	fbb1 f3f3 	udiv	r3, r1, r3
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f001 fb98 	bl	8002e9e <HAL_SYSTICK_Config>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	d809      	bhi.n	800178e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177a:	2200      	movs	r2, #0
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	f04f 30ff 	mov.w	r0, #4294967295
 8001782:	f001 fb72 	bl	8002e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_InitTick+0x70>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e007      	b.n	800179e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e004      	b.n	800179e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000020 	.word	0x20000020
 80017ac:	20000018 	.word	0x20000018
 80017b0:	2000001c 	.word	0x2000001c

080017b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x1c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_IncTick+0x20>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_IncTick+0x1c>)
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20000110 	.word	0x20000110
 80017d4:	20000020 	.word	0x20000020

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000110 	.word	0x20000110

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d004      	beq.n	8001814 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_Delay+0x40>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001814:	bf00      	nop
 8001816:	f7ff ffdf 	bl	80017d8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	429a      	cmp	r2, r3
 8001824:	d8f7      	bhi.n	8001816 <HAL_Delay+0x26>
  {
  }
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000020 	.word	0x20000020

08001834 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3360      	adds	r3, #96	; 0x60
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <LL_ADC_SetOffset+0x44>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	4313      	orrs	r3, r2
 80018cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	03fff000 	.word	0x03fff000

080018e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3360      	adds	r3, #96	; 0x60
 80018f2:	461a      	mov	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3360      	adds	r3, #96	; 0x60
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001946:	b480      	push	{r7}
 8001948:	b087      	sub	sp, #28
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3360      	adds	r3, #96	; 0x60
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3360      	adds	r3, #96	; 0x60
 800198c:	461a      	mov	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	615a      	str	r2, [r3, #20]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	211f      	movs	r1, #31
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	f003 011f 	and.w	r1, r3, #31
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b087      	sub	sp, #28
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3314      	adds	r3, #20
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	0e5b      	lsrs	r3, r3, #25
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0d1b      	lsrs	r3, r3, #20
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	2107      	movs	r1, #7
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	0d1b      	lsrs	r3, r3, #20
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aa0:	bf00      	nop
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0318 	and.w	r3, r3, #24
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ad0:	40d9      	lsrs	r1, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	0007ffff 	.word	0x0007ffff

08001af4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 031f 	and.w	r3, r3, #31
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6093      	str	r3, [r2, #8]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_IsEnabled+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_IsEnabled+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2a:	f043 0204 	orr.w	r2, r3, #4
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d101      	bne.n	8001c7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e16b      	b.n	8001f7e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fc27 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff3f 	bl	8001b50 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff25 	bl	8001b2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff5a 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff3e 	bl	8001b78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001cfc:	4ba2      	ldr	r3, [pc, #648]	; (8001f88 <HAL_ADC_Init+0x2fc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	4aa2      	ldr	r2, [pc, #648]	; (8001f8c <HAL_ADC_Init+0x300>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff3e 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	f043 0210 	orr.w	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff77 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8001d50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8106 	bne.w	8001f6c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8102 	bne.w	8001f6c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d70:	f043 0202 	orr.w	r2, r3, #2
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff37 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d8c:	f7ff ff30 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d90:	4604      	mov	r4, r0
 8001d92:	487f      	ldr	r0, [pc, #508]	; (8001f90 <HAL_ADC_Init+0x304>)
 8001d94:	f7ff ff2c 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4619      	mov	r1, r3
 8001da6:	487b      	ldr	r0, [pc, #492]	; (8001f94 <HAL_ADC_Init+0x308>)
 8001da8:	f7ff fd44 	bl	8001834 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7f5b      	ldrb	r3, [r3, #29]
 8001db0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001dbc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dc2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d106      	bne.n	8001de8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	3b01      	subs	r3, #1
 8001de0:	045b      	lsls	r3, r3, #17
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_ADC_Init+0x30c>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff03 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8001e38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff10 	bl	8001c64 <LL_ADC_INJ_IsConversionOngoing>
 8001e44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d16d      	bne.n	8001f28 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d16a      	bne.n	8001f28 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e5e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e6e:	f023 0302 	bic.w	r3, r3, #2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d017      	beq.n	8001eb4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6911      	ldr	r1, [r2, #16]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001eb2:	e013      	b.n	8001edc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ec2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f023 010f 	bic.w	r1, r3, #15
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
 8001f48:	e007      	b.n	8001f5a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020f 	bic.w	r2, r2, #15
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f6a:	e007      	b.n	8001f7c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000018 	.word	0x20000018
 8001f8c:	053e2d63 	.word	0x053e2d63
 8001f90:	50000100 	.word	0x50000100
 8001f94:	50000300 	.word	0x50000300
 8001f98:	fff04007 	.word	0xfff04007

08001f9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa4:	4859      	ldr	r0, [pc, #356]	; (800210c <HAL_ADC_Start+0x170>)
 8001fa6:	f7ff fda5 	bl	8001af4 <LL_ADC_GetMultimode>
 8001faa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe44 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 809f 	bne.w	80020fc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_Start+0x30>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e09a      	b.n	8002102 <HAL_ADC_Start+0x166>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fd6b 	bl	8002ab0 <ADC_Enable>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 8086 	bne.w	80020f2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a44      	ldr	r2, [pc, #272]	; (8002110 <HAL_ADC_Start+0x174>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d002      	beq.n	800200a <HAL_ADC_Start+0x6e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e001      	b.n	800200e <HAL_ADC_Start+0x72>
 800200a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4293      	cmp	r3, r2
 8002014:	d002      	beq.n	800201c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002034:	d106      	bne.n	8002044 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f023 0206 	bic.w	r2, r3, #6
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	661a      	str	r2, [r3, #96]	; 0x60
 8002042:	e002      	b.n	800204a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	221c      	movs	r2, #28
 8002050:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <HAL_ADC_Start+0x174>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d002      	beq.n	800206a <HAL_ADC_Start+0xce>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e001      	b.n	800206e <HAL_ADC_Start+0xd2>
 800206a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4293      	cmp	r3, r2
 8002074:	d008      	beq.n	8002088 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d002      	beq.n	8002088 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d114      	bne.n	80020b2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fdb3 	bl	8001c16 <LL_ADC_REG_StartConversion>
 80020b0:	e026      	b.n	8002100 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <HAL_ADC_Start+0x174>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d002      	beq.n	80020ce <HAL_ADC_Start+0x132>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e001      	b.n	80020d2 <HAL_ADC_Start+0x136>
 80020ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00f      	beq.n	8002100 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80020f0:	e006      	b.n	8002100 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80020fa:	e001      	b.n	8002100 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002100:	7dfb      	ldrb	r3, [r7, #23]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	50000300 	.word	0x50000300
 8002110:	50000100 	.word	0x50000100

08002114 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800211e:	4863      	ldr	r0, [pc, #396]	; (80022ac <HAL_ADC_PollForConversion+0x198>)
 8002120:	f7ff fce8 	bl	8001af4 <LL_ADC_GetMultimode>
 8002124:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d102      	bne.n	8002134 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800212e:	2308      	movs	r3, #8
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e02a      	b.n	800218a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d002      	beq.n	8002146 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b09      	cmp	r3, #9
 8002144:	d111      	bne.n	800216a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e09f      	b.n	80022a4 <HAL_ADC_PollForConversion+0x190>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002164:	2304      	movs	r3, #4
 8002166:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002168:	e00f      	b.n	800218a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800216a:	4850      	ldr	r0, [pc, #320]	; (80022ac <HAL_ADC_PollForConversion+0x198>)
 800216c:	f7ff fcd0 	bl	8001b10 <LL_ADC_GetMultiDMATransfer>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e08e      	b.n	80022a4 <HAL_ADC_PollForConversion+0x190>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002186:	2304      	movs	r3, #4
 8002188:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800218a:	f7ff fb25 	bl	80017d8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002190:	e01a      	b.n	80021c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d016      	beq.n	80021c8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800219a:	f7ff fb1d 	bl	80017d8 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <HAL_ADC_PollForConversion+0x9c>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	f043 0204 	orr.w	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e06d      	b.n	80022a4 <HAL_ADC_PollForConversion+0x190>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0dd      	beq.n	8002192 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fbf6 	bl	80019d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01c      	beq.n	800222c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7f5b      	ldrb	r3, [r3, #29]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d111      	bne.n	800222c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_ADC_PollForConversion+0x19c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d002      	beq.n	800223c <HAL_ADC_PollForConversion+0x128>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e001      	b.n	8002240 <HAL_ADC_PollForConversion+0x12c>
 800223c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	4293      	cmp	r3, r2
 8002246:	d008      	beq.n	800225a <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d002      	beq.n	800225a <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d104      	bne.n	8002264 <HAL_ADC_PollForConversion+0x150>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e00d      	b.n	8002280 <HAL_ADC_PollForConversion+0x16c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_ADC_PollForConversion+0x19c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d002      	beq.n	8002274 <HAL_ADC_PollForConversion+0x160>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e001      	b.n	8002278 <HAL_ADC_PollForConversion+0x164>
 8002274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002278:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d104      	bne.n	8002290 <HAL_ADC_PollForConversion+0x17c>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e008      	b.n	80022a2 <HAL_ADC_PollForConversion+0x18e>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_ADC_PollForConversion+0x18e>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	50000300 	.word	0x50000300
 80022b0:	50000100 	.word	0x50000100

080022b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b6      	sub	sp, #216	; 0xd8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x22>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e3c7      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x7b2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fc9d 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 83ac 	bne.w	8002a64 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fb70 	bl	80019fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fc8b 	bl	8001c3e <LL_ADC_REG_IsConversionOngoing>
 8002328:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc97 	bl	8001c64 <LL_ADC_INJ_IsConversionOngoing>
 8002336:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800233a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 81d9 	bne.w	80026f6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 81d4 	bne.w	80026f6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002356:	d10f      	bne.n	8002378 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff fb77 	bl	8001a56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fb1e 	bl	80019b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002376:	e00e      	b.n	8002396 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	461a      	mov	r2, r3
 8002386:	f7ff fb66 	bl	8001a56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb0e 	bl	80019b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d022      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6919      	ldr	r1, [r3, #16]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023c8:	f7ff fa68 	bl	800189c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6919      	ldr	r1, [r3, #16]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	461a      	mov	r2, r3
 80023da:	f7ff fab4 	bl	8001946 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7f1b      	ldrb	r3, [r3, #28]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x124>
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x126>
 80023f4:	2300      	movs	r3, #0
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7ff fac0 	bl	800197c <LL_ADC_SetOffsetSaturation>
 80023fc:	e17b      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fa6d 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x15a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fa62 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	e01e      	b.n	8002468 <HAL_ADC_ConfigChannel+0x198>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fa57 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800244c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e004      	b.n	8002466 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800245c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1b0>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	e018      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1e2>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80024a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d106      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa26 	bl	8001910 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fa0a 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x220>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f9ff 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	e01e      	b.n	800252e <HAL_ADC_ConfigChannel+0x25e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f9f4 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800250e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e004      	b.n	800252c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x276>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	e018      	b.n	8002578 <HAL_ADC_ConfigChannel+0x2a8>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800255a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800255e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800256e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f9c3 	bl	8001910 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2102      	movs	r1, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f9a7 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x2e6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2102      	movs	r1, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f99c 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e01e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x324>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f991 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_ConfigChannel+0x33c>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	e016      	b.n	800263a <HAL_ADC_ConfigChannel+0x36a>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800261e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	2102      	movs	r1, #2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f962 	bl	8001910 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2103      	movs	r1, #3
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f946 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x3a8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2103      	movs	r1, #3
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f93b 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	e017      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x3d8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2103      	movs	r1, #3
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f930 	bl	80018e4 <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002692:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800269e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x3f0>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	e011      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x414>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2103      	movs	r1, #3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f90d 	bl	8001910 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fa78 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8140 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	f7ff f9c9 	bl	8001aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a8f      	ldr	r2, [pc, #572]	; (800295c <HAL_ADC_ConfigChannel+0x68c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	f040 8131 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_ADC_ConfigChannel+0x47e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b09      	cmp	r3, #9
 8002744:	bf94      	ite	ls
 8002746:	2301      	movls	r3, #1
 8002748:	2300      	movhi	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	e019      	b.n	8002782 <HAL_ADC_ConfigChannel+0x4b2>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800275c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800275e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e003      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800276a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b09      	cmp	r3, #9
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002782:	2b00      	cmp	r3, #0
 8002784:	d079      	beq.n	800287a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d107      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x4d2>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a0:	e015      	b.n	80027ce <HAL_ADC_ConfigChannel+0x4fe>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80027be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	069b      	lsls	r3, r3, #26
 80027ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x51e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	e017      	b.n	800281e <HAL_ADC_ConfigChannel+0x54e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800280a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	ea42 0103 	orr.w	r1, r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x574>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	3301      	adds	r3, #1
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	051b      	lsls	r3, r3, #20
 8002842:	e018      	b.n	8002876 <HAL_ADC_ConfigChannel+0x5a6>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002876:	430b      	orrs	r3, r1
 8002878:	e081      	b.n	800297e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x5c6>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002894:	e015      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x5f2>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e003      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x612>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	e017      	b.n	8002912 <HAL_ADC_ConfigChannel+0x642>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	61fb      	str	r3, [r7, #28]
  return result;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e003      	b.n	8002906 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	ea42 0103 	orr.w	r1, r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <HAL_ADC_ConfigChannel+0x66e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	3b1e      	subs	r3, #30
 8002936:	051b      	lsls	r3, r3, #20
 8002938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293c:	e01e      	b.n	800297c <HAL_ADC_ConfigChannel+0x6ac>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	613b      	str	r3, [r7, #16]
  return result;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e006      	b.n	8002968 <HAL_ADC_ConfigChannel+0x698>
 800295a:	bf00      	nop
 800295c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	3b1e      	subs	r3, #30
 8002976:	051b      	lsls	r3, r3, #20
 8002978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297c:	430b      	orrs	r3, r1
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	4619      	mov	r1, r3
 8002984:	f7ff f867 	bl	8001a56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_ADC_ConfigChannel+0x7bc>)
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d070      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002994:	483e      	ldr	r0, [pc, #248]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002996:	f7fe ff73 	bl	8001880 <LL_ADC_GetCommonPathInternalCh>
 800299a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x6e2>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d126      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d120      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c6:	d156      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d0:	4619      	mov	r1, r3
 80029d2:	482f      	ldr	r0, [pc, #188]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 80029d4:	f7fe ff41 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_ADC_ConfigChannel+0x7cc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	4a30      	ldr	r2, [pc, #192]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7d0>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099a      	lsrs	r2, r3, #6
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029f0:	e002      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f9      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029fe:	e03a      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d113      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x762>
 8002a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02a      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4819      	ldr	r0, [pc, #100]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a2c:	f7fe ff15 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a30:	e021      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_ADC_ConfigChannel+0x7dc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11c      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d116      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d011      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a5e:	f7fe fefc 	bl	800185a <LL_ADC_SetCommonPathInternalCh>
 8002a62:	e008      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	37d8      	adds	r7, #216	; 0xd8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	80080000 	.word	0x80080000
 8002a90:	50000300 	.word	0x50000300
 8002a94:	c3210000 	.word	0xc3210000
 8002a98:	90c00010 	.word	0x90c00010
 8002a9c:	20000018 	.word	0x20000018
 8002aa0:	053e2d63 	.word	0x053e2d63
 8002aa4:	c7520000 	.word	0xc7520000
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	cb840000 	.word	0xcb840000

08002ab0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f897 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d146      	bne.n	8002b56 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <ADC_Enable+0xb0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e032      	b.n	8002b58 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f866 	bl	8001bc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fe6c 	bl	80017d8 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b02:	e021      	b.n	8002b48 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f871 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff f855 	bl	8001bc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b1e:	f7fe fe5b 	bl	80017d8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d90d      	bls.n	8002b48 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e007      	b.n	8002b58 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d1d6      	bne.n	8002b04 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	8000003f 	.word	0x8000003f

08002b64 <LL_ADC_IsEnabled>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_IsEnabled+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_IsEnabled+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b0a1      	sub	sp, #132	; 0x84
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e087      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bde:	d102      	bne.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	e001      	b.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e06a      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ffbd 	bl	8002b8a <LL_ADC_REG_IsConversionOngoing>
 8002c10:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ffb7 	bl	8002b8a <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d14c      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d149      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002c2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d028      	beq.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c46:	035b      	lsls	r3, r3, #13
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c54:	f7ff ff86 	bl	8002b64 <LL_ADC_IsEnabled>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4823      	ldr	r0, [pc, #140]	; (8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002c5c:	f7ff ff82 	bl	8002b64 <LL_ADC_IsEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4323      	orrs	r3, r4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d133      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c70:	f023 030f 	bic.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	6811      	ldr	r1, [r2, #0]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c82:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c84:	e024      	b.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c90:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c96:	f7ff ff65 	bl	8002b64 <LL_ADC_IsEnabled>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002c9e:	f7ff ff61 	bl	8002b64 <LL_ADC_IsEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4323      	orrs	r3, r4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d112      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cb2:	f023 030f 	bic.w	r3, r3, #15
 8002cb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cb8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cba:	e009      	b.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cce:	e000      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3784      	adds	r7, #132	; 0x84
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	50000100 	.word	0x50000100
 8002cec:	50000300 	.word	0x50000300

08002cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__NVIC_GetPriorityGrouping+0x18>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0307 	and.w	r3, r3, #7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	; (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	; (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	; 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e20:	d301      	bcc.n	8002e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00f      	b.n	8002e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <SysTick_Config+0x40>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f7ff ff8e 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SysTick_Config+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <SysTick_Config+0x40>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff47 	bl	8002cf0 <__NVIC_SetPriorityGrouping>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff5e 	bl	8002d38 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff90 	bl	8002da8 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5f 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffb2 	bl	8002e10 <SysTick_Config>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ec6:	e15a      	b.n	800317e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 814c 	beq.w	8003178 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d00b      	beq.n	8002f00 <HAL_GPIO_Init+0x48>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef4:	2b11      	cmp	r3, #17
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b12      	cmp	r3, #18
 8002efe:	d130      	bne.n	8002f62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f36:	2201      	movs	r2, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 0201 	and.w	r2, r3, #1
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0xea>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b12      	cmp	r3, #18
 8002fa0:	d123      	bne.n	8002fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	08da      	lsrs	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3208      	adds	r2, #8
 8002faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	08da      	lsrs	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3208      	adds	r2, #8
 8002fe4:	6939      	ldr	r1, [r7, #16]
 8002fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80a6 	beq.w	8003178 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302c:	4b5b      	ldr	r3, [pc, #364]	; (800319c <HAL_GPIO_Init+0x2e4>)
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003030:	4a5a      	ldr	r2, [pc, #360]	; (800319c <HAL_GPIO_Init+0x2e4>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6613      	str	r3, [r2, #96]	; 0x60
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_GPIO_Init+0x2e4>)
 800303a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003044:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_GPIO_Init+0x2e8>)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800306e:	d01f      	beq.n	80030b0 <HAL_GPIO_Init+0x1f8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_GPIO_Init+0x2ec>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d019      	beq.n	80030ac <HAL_GPIO_Init+0x1f4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a4b      	ldr	r2, [pc, #300]	; (80031a8 <HAL_GPIO_Init+0x2f0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_GPIO_Init+0x1f0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a4a      	ldr	r2, [pc, #296]	; (80031ac <HAL_GPIO_Init+0x2f4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00d      	beq.n	80030a4 <HAL_GPIO_Init+0x1ec>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a49      	ldr	r2, [pc, #292]	; (80031b0 <HAL_GPIO_Init+0x2f8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <HAL_GPIO_Init+0x1e8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_GPIO_Init+0x2fc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_GPIO_Init+0x1e4>
 8003098:	2305      	movs	r3, #5
 800309a:	e00a      	b.n	80030b2 <HAL_GPIO_Init+0x1fa>
 800309c:	2306      	movs	r3, #6
 800309e:	e008      	b.n	80030b2 <HAL_GPIO_Init+0x1fa>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e006      	b.n	80030b2 <HAL_GPIO_Init+0x1fa>
 80030a4:	2303      	movs	r3, #3
 80030a6:	e004      	b.n	80030b2 <HAL_GPIO_Init+0x1fa>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_Init+0x1fa>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_GPIO_Init+0x1fa>
 80030b0:	2300      	movs	r3, #0
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	f002 0203 	and.w	r2, r2, #3
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	4093      	lsls	r3, r2
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030c2:	4937      	ldr	r1, [pc, #220]	; (80031a0 <HAL_GPIO_Init+0x2e8>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_GPIO_Init+0x300>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030f4:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_GPIO_Init+0x300>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_GPIO_Init+0x300>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800311e:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_GPIO_Init+0x300>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003172:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f ae9d 	bne.w	8002ec8 <HAL_GPIO_Init+0x10>
  }
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	48000400 	.word	0x48000400
 80031a8:	48000800 	.word	0x48000800
 80031ac:	48000c00 	.word	0x48000c00
 80031b0:	48001000 	.word	0x48001000
 80031b4:	48001400 	.word	0x48001400
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e001      	b.n	80031de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
 80031f8:	4613      	mov	r3, r2
 80031fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003208:	e002      	b.n	8003210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43d9      	mvns	r1, r3
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d141      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325e:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d131      	bne.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800326c:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	4a46      	ldr	r2, [pc, #280]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003284:	4a41      	ldr	r2, [pc, #260]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800328c:	4b40      	ldr	r3, [pc, #256]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2232      	movs	r2, #50	; 0x32
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	4a3f      	ldr	r2, [pc, #252]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0c9b      	lsrs	r3, r3, #18
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a2:	e002      	b.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032aa:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d102      	bne.n	80032be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f2      	bne.n	80032a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032be:	4b33      	ldr	r3, [pc, #204]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d158      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e057      	b.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d0:	4b2e      	ldr	r3, [pc, #184]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032e0:	e04d      	b.n	800337e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d141      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d131      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f8:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	4a23      	ldr	r2, [pc, #140]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	0c9b      	lsrs	r3, r3, #18
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332e:	e002      	b.n	8003336 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3b01      	subs	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d102      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f2      	bne.n	8003330 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d112      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e011      	b.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800336c:	e007      	b.n	800337e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800337c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40007000 	.word	0x40007000
 8003390:	20000018 	.word	0x20000018
 8003394:	431bde83 	.word	0x431bde83

08003398 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a6:	6093      	str	r3, [r2, #8]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40007000 	.word	0x40007000

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e308      	b.n	80039dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d075      	beq.n	80034c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d6:	4ba3      	ldr	r3, [pc, #652]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e0:	4ba0      	ldr	r3, [pc, #640]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3e>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_OscConfig+0x44>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d10b      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b99      	ldr	r3, [pc, #612]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x108>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d157      	bne.n	80034c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e2e3      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x74>
 800341e:	4b91      	ldr	r3, [pc, #580]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a90      	ldr	r2, [pc, #576]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8a      	ldr	r2, [pc, #552]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a87      	ldr	r2, [pc, #540]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 8003450:	4b84      	ldr	r3, [pc, #528]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a83      	ldr	r2, [pc, #524]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b81      	ldr	r3, [pc, #516]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a80      	ldr	r2, [pc, #512]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe f9b2 	bl	80017d8 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe f9ae 	bl	80017d8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e2a8      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xc0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe f99e 	bl	80017d8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe f99a 	bl	80017d8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e294      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034b2:	4b6c      	ldr	r3, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0xe8>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d075      	beq.n	80035ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d8:	4b62      	ldr	r3, [pc, #392]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0x136>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_OscConfig+0x13c>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d11f      	bne.n	8003534 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f4:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x154>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e267      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b55      	ldr	r3, [pc, #340]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	061b      	lsls	r3, r3, #24
 800351a:	4952      	ldr	r1, [pc, #328]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003520:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_RCC_OscConfig+0x2b0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe f90b 	bl	8001740 <HAL_InitTick>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d043      	beq.n	80035b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e253      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b49      	ldr	r3, [pc, #292]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a48      	ldr	r2, [pc, #288]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe f946 	bl	80017d8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7fe f942 	bl	80017d8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e23c      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003562:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	061b      	lsls	r3, r3, #24
 800357c:	4939      	ldr	r1, [pc, #228]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
 8003582:	e01a      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003584:	4b37      	ldr	r3, [pc, #220]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a36      	ldr	r2, [pc, #216]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe f922 	bl	80017d8 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe f91e 	bl	80017d8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e218      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035aa:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1e0>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03c      	beq.n	8003640 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01c      	beq.n	8003608 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe f8fb 	bl	80017d8 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe f8f7 	bl	80017d8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1f1      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0ef      	beq.n	80035e6 <HAL_RCC_OscConfig+0x22e>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360e:	4a15      	ldr	r2, [pc, #84]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe f8de 	bl	80017d8 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe f8da 	bl	80017d8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1d4      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ef      	bne.n	8003620 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80ab 	beq.w	80037a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x2b4>
 800365e:	2301      	movs	r3, #1
 8003660:	e005      	b.n	800366e <HAL_RCC_OscConfig+0x2b6>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	2000001c 	.word	0x2000001c
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4baf      	ldr	r3, [pc, #700]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	4aae      	ldr	r2, [pc, #696]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	6593      	str	r3, [r2, #88]	; 0x58
 800367e:	4bac      	ldr	r3, [pc, #688]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368e:	4ba9      	ldr	r3, [pc, #676]	; (8003934 <HAL_RCC_OscConfig+0x57c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800369a:	4ba6      	ldr	r3, [pc, #664]	; (8003934 <HAL_RCC_OscConfig+0x57c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4aa5      	ldr	r2, [pc, #660]	; (8003934 <HAL_RCC_OscConfig+0x57c>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe f897 	bl	80017d8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe f893 	bl	80017d8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e18d      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c0:	4b9c      	ldr	r3, [pc, #624]	; (8003934 <HAL_RCC_OscConfig+0x57c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_RCC_OscConfig+0x32e>
 80036d4:	4b96      	ldr	r3, [pc, #600]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	4a95      	ldr	r2, [pc, #596]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e4:	e024      	b.n	8003730 <HAL_RCC_OscConfig+0x378>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b05      	cmp	r3, #5
 80036ec:	d110      	bne.n	8003710 <HAL_RCC_OscConfig+0x358>
 80036ee:	4b90      	ldr	r3, [pc, #576]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	4a8e      	ldr	r2, [pc, #568]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fe:	4b8c      	ldr	r3, [pc, #560]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a8a      	ldr	r2, [pc, #552]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370e:	e00f      	b.n	8003730 <HAL_RCC_OscConfig+0x378>
 8003710:	4b87      	ldr	r3, [pc, #540]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	4a86      	ldr	r2, [pc, #536]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003720:	4b83      	ldr	r3, [pc, #524]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	4a82      	ldr	r2, [pc, #520]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fe f84e 	bl	80017d8 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fe f84a 	bl	80017d8 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e142      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ed      	beq.n	8003740 <HAL_RCC_OscConfig+0x388>
 8003764:	e015      	b.n	8003792 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe f837 	bl	80017d8 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe f833 	bl	80017d8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e12b      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003784:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ed      	bne.n	800376e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	4a64      	ldr	r2, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03c      	beq.n	800382a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037b8:	4b5d      	ldr	r3, [pc, #372]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80037ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037be:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe f806 	bl	80017d8 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d0:	f7fe f802 	bl	80017d8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0fc      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037e2:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80037e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ef      	beq.n	80037d0 <HAL_RCC_OscConfig+0x418>
 80037f0:	e01b      	b.n	800382a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037f2:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80037f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f8:	4a4d      	ldr	r2, [pc, #308]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fd ffe9 	bl	80017d8 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800380a:	f7fd ffe5 	bl	80017d8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0df      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800381c:	4b44      	ldr	r3, [pc, #272]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800381e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ef      	bne.n	800380a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80d3 	beq.w	80039da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b0c      	cmp	r3, #12
 800383e:	f000 808d 	beq.w	800395c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d15a      	bne.n	8003900 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fd ffbf 	bl	80017d8 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385e:	f7fd ffbb 	bl	80017d8 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0b5      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003870:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f0      	bne.n	800385e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387c:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_RCC_OscConfig+0x580>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6a11      	ldr	r1, [r2, #32]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388c:	3a01      	subs	r2, #1
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003896:	0212      	lsls	r2, r2, #8
 8003898:	4311      	orrs	r1, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800389e:	0852      	lsrs	r2, r2, #1
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0552      	lsls	r2, r2, #21
 80038a4:	4311      	orrs	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038aa:	0852      	lsrs	r2, r2, #1
 80038ac:	3a01      	subs	r2, #1
 80038ae:	0652      	lsls	r2, r2, #25
 80038b0:	4311      	orrs	r1, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038b6:	06d2      	lsls	r2, r2, #27
 80038b8:	430a      	orrs	r2, r1
 80038ba:	491d      	ldr	r1, [pc, #116]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd ff7e 	bl	80017d8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd ff7a 	bl	80017d8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e074      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x528>
 80038fe:	e06c      	b.n	80039da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <HAL_RCC_OscConfig+0x578>)
 800391e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003926:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd ff56 	bl	80017d8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392e:	e00e      	b.n	800394e <HAL_RCC_OscConfig+0x596>
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd ff4c 	bl	80017d8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e046      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <HAL_RCC_OscConfig+0x62c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x584>
 800395a:	e03e      	b.n	80039da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e039      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCC_OscConfig+0x62c>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	429a      	cmp	r2, r3
 800397a:	d12c      	bne.n	80039d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	3b01      	subs	r3, #1
 8003988:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d123      	bne.n	80039d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11b      	bne.n	80039d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d113      	bne.n	80039d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	3b01      	subs	r3, #1
 80039bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d109      	bne.n	80039d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	3b01      	subs	r3, #1
 80039d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e11e      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d910      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 020f 	bic.w	r2, r3, #15
 8003a16:	498c      	ldr	r1, [pc, #560]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b8a      	ldr	r3, [pc, #552]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e106      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d073      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d129      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a44:	4b81      	ldr	r3, [pc, #516]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0f4      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a54:	f000 f966 	bl	8003d24 <RCC_GetSysClockFreqFromPLLSource>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4a7c      	ldr	r2, [pc, #496]	; (8003c50 <HAL_RCC_ClockConfig+0x268>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d93f      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a62:	4b7a      	ldr	r3, [pc, #488]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d033      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d12f      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a82:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8a:	4a70      	ldr	r2, [pc, #448]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e024      	b.n	8003ae2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0c6      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0be      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ac0:	f000 f8ce 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4a61      	ldr	r2, [pc, #388]	; (8003c50 <HAL_RCC_ClockConfig+0x268>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d909      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ace:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad6:	4a5d      	ldr	r2, [pc, #372]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4957      	ldr	r1, [pc, #348]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fd fe70 	bl	80017d8 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fd fe6c 	bl	80017d8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e095      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 020c 	and.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1eb      	bne.n	8003afc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a42      	ldr	r2, [pc, #264]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b54:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b5c:	4a3b      	ldr	r2, [pc, #236]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b64:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4936      	ldr	r1, [pc, #216]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a32      	ldr	r2, [pc, #200]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d21d      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 020f 	bic.w	r2, r3, #15
 8003ba0:	4929      	ldr	r1, [pc, #164]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ba8:	f7fd fe16 	bl	80017d8 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	f7fd fe12 	bl	80017d8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e03b      	b.n	8003c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1ed      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4917      	ldr	r1, [pc, #92]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	490f      	ldr	r1, [pc, #60]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c12:	f000 f825 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c16:	4601      	mov	r1, r0
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <HAL_RCC_ClockConfig+0x26c>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x270>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x274>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd fd82 	bl	8001740 <HAL_InitTick>
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	04c4b400 	.word	0x04c4b400
 8003c54:	08005408 	.word	0x08005408
 8003c58:	20000018 	.word	0x20000018
 8003c5c:	2000001c 	.word	0x2000001c

08003c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e047      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c84:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e03e      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d136      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	3301      	adds	r3, #1
 8003cac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb4:	4a1a      	ldr	r2, [pc, #104]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cbe:	68d2      	ldr	r2, [r2, #12]
 8003cc0:	0a12      	lsrs	r2, r2, #8
 8003cc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	617b      	str	r3, [r7, #20]
      break;
 8003ccc:	e00c      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4a10      	ldr	r2, [pc, #64]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd8:	68d2      	ldr	r2, [r2, #12]
 8003cda:	0a12      	lsrs	r2, r2, #8
 8003cdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
      break;
 8003ce6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	0e5b      	lsrs	r3, r3, #25
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	e001      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d08:	693b      	ldr	r3, [r7, #16]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200

08003d24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d10c      	bne.n	8003d62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d48:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d52:	68d2      	ldr	r2, [r2, #12]
 8003d54:	0a12      	lsrs	r2, r2, #8
 8003d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
    break;
 8003d60:	e00c      	b.n	8003d7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6c:	68d2      	ldr	r2, [r2, #12]
 8003d6e:	0a12      	lsrs	r2, r2, #8
 8003d70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
    break;
 8003d7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0e5b      	lsrs	r3, r3, #25
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d96:	687b      	ldr	r3, [r7, #4]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40021000 	.word	0x40021000
 8003da8:	007a1200 	.word	0x007a1200
 8003dac:	00f42400 	.word	0x00f42400

08003db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db8:	2300      	movs	r3, #0
 8003dba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8098 	beq.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	4a3f      	ldr	r2, [pc, #252]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df6:	2301      	movs	r3, #1
 8003df8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a39      	ldr	r2, [pc, #228]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e06:	f7fd fce7 	bl	80017d8 <HAL_GetTick>
 8003e0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0c:	e009      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0e:	f7fd fce3 	bl	80017d8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d902      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	74fb      	strb	r3, [r7, #19]
        break;
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e22:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ef      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d159      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01e      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d019      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fca3 	bl	80017d8 <HAL_GetTick>
 8003e92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e94:	e00b      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd fc9f 	bl	80017d8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d902      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	74fb      	strb	r3, [r7, #19]
            break;
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ec      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ed8:	e008      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	74bb      	strb	r3, [r7, #18]
 8003ede:	e005      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eec:	7c7b      	ldrb	r3, [r7, #17]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef2:	4ba6      	ldr	r3, [pc, #664]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	4aa5      	ldr	r2, [pc, #660]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f0a:	4ba0      	ldr	r3, [pc, #640]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 0203 	bic.w	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	499c      	ldr	r1, [pc, #624]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f2c:	4b97      	ldr	r3, [pc, #604]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 020c 	bic.w	r2, r3, #12
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4994      	ldr	r1, [pc, #592]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f4e:	4b8f      	ldr	r3, [pc, #572]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	498b      	ldr	r1, [pc, #556]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f70:	4b86      	ldr	r3, [pc, #536]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4983      	ldr	r1, [pc, #524]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f92:	4b7e      	ldr	r3, [pc, #504]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	497a      	ldr	r1, [pc, #488]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb4:	4b75      	ldr	r3, [pc, #468]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	4972      	ldr	r1, [pc, #456]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4969      	ldr	r1, [pc, #420]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff8:	4b64      	ldr	r3, [pc, #400]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4961      	ldr	r1, [pc, #388]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	4958      	ldr	r1, [pc, #352]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	4950      	ldr	r1, [pc, #320]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405a:	d105      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a4a      	ldr	r2, [pc, #296]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004066:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004074:	4b45      	ldr	r3, [pc, #276]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	4942      	ldr	r1, [pc, #264]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004094:	4b3d      	ldr	r3, [pc, #244]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a3c      	ldr	r2, [pc, #240]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ca:	d105      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040cc:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a2e      	ldr	r2, [pc, #184]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	4926      	ldr	r1, [pc, #152]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	4918      	ldr	r1, [pc, #96]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413a:	d105      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004146:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	490a      	ldr	r1, [pc, #40]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004180:	7cbb      	ldrb	r3, [r7, #18]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000

08004190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e049      	b.n	8004236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd f9e4 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 fb78 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e049      	b.n	80042e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f841 	bl	80042ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 fb21 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_TIM_PWM_Start+0x24>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e03c      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d109      	bne.n	800433e <HAL_TIM_PWM_Start+0x3e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e02f      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start+0x58>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e022      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start+0x72>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e015      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b10      	cmp	r3, #16
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x8c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e008      	b.n	800439e <HAL_TIM_PWM_Start+0x9e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e097      	b.n	80044d6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0xb6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b4:	e023      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0xc6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	e01b      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xd6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d4:	e013      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xe6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xf6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f4:	e003      	b.n	80043fe <HAL_TIM_PWM_Start+0xfe>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fe7e 	bl	8005108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <HAL_TIM_PWM_Start+0x1e0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_TIM_PWM_Start+0x13e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <HAL_TIM_PWM_Start+0x1e4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIM_PWM_Start+0x13e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <HAL_TIM_PWM_Start+0x1e8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_TIM_PWM_Start+0x13e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <HAL_TIM_PWM_Start+0x1ec>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIM_PWM_Start+0x13e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <HAL_TIM_PWM_Start+0x1f0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_Start+0x142>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_TIM_PWM_Start+0x144>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004456:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a20      	ldr	r2, [pc, #128]	; (80044e0 <HAL_TIM_PWM_Start+0x1e0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_TIM_PWM_Start+0x194>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d013      	beq.n	8004494 <HAL_TIM_PWM_Start+0x194>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <HAL_TIM_PWM_Start+0x1f4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_PWM_Start+0x194>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_TIM_PWM_Start+0x1f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_PWM_Start+0x194>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <HAL_TIM_PWM_Start+0x1e4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_PWM_Start+0x194>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <HAL_TIM_PWM_Start+0x1e8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d115      	bne.n	80044c0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_TIM_PWM_Start+0x1fc>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d015      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x1d2>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d011      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e008      	b.n	80044d2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	40014400 	.word	0x40014400
 80044f0:	40014800 	.word	0x40014800
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	00010007 	.word	0x00010007

08004500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004516:	2302      	movs	r3, #2
 8004518:	e0fd      	b.n	8004716 <HAL_TIM_PWM_ConfigChannel+0x216>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b14      	cmp	r3, #20
 8004526:	f200 80f0 	bhi.w	800470a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004585 	.word	0x08004585
 8004534:	0800470b 	.word	0x0800470b
 8004538:	0800470b 	.word	0x0800470b
 800453c:	0800470b 	.word	0x0800470b
 8004540:	080045c5 	.word	0x080045c5
 8004544:	0800470b 	.word	0x0800470b
 8004548:	0800470b 	.word	0x0800470b
 800454c:	0800470b 	.word	0x0800470b
 8004550:	08004607 	.word	0x08004607
 8004554:	0800470b 	.word	0x0800470b
 8004558:	0800470b 	.word	0x0800470b
 800455c:	0800470b 	.word	0x0800470b
 8004560:	08004647 	.word	0x08004647
 8004564:	0800470b 	.word	0x0800470b
 8004568:	0800470b 	.word	0x0800470b
 800456c:	0800470b 	.word	0x0800470b
 8004570:	08004689 	.word	0x08004689
 8004574:	0800470b 	.word	0x0800470b
 8004578:	0800470b 	.word	0x0800470b
 800457c:	0800470b 	.word	0x0800470b
 8004580:	080046c9 	.word	0x080046c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa2a 	bl	80049e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
      break;
 80045c2:	e0a3      	b.n	800470c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa9a 	bl	8004b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
      break;
 8004604:	e082      	b.n	800470c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fb03 	bl	8004c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
      break;
 8004644:	e062      	b.n	800470c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb6b 	bl	8004d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
      break;
 8004686:	e041      	b.n	800470c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fbd4 	bl	8004e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0204 	bic.w	r2, r2, #4
 80046b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80046c6:	e021      	b.n	800470c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fc18 	bl	8004f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004708:	e000      	b.n	800470c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800470a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_TIM_ConfigClockSource+0x18>
 8004734:	2302      	movs	r3, #2
 8004736:	e0b9      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x18c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800475a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004762:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d02e      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0xb2>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d812      	bhi.n	800479e <HAL_TIM_ConfigClockSource+0x7e>
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	f000 8084 	beq.w	8004886 <HAL_TIM_ConfigClockSource+0x166>
 800477e:	2b30      	cmp	r3, #48	; 0x30
 8004780:	d806      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x70>
 8004782:	2b10      	cmp	r3, #16
 8004784:	d07f      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 8004786:	2b20      	cmp	r3, #32
 8004788:	d07d      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d07b      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800478e:	e084      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004790:	2b50      	cmp	r3, #80	; 0x50
 8004792:	d048      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x106>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d056      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x126>
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d064      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x146>
      break;
 800479c:	e07d      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800479e:	4a45      	ldr	r2, [pc, #276]	; (80048b4 <HAL_TIM_ConfigClockSource+0x194>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d070      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047a4:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <HAL_TIM_ConfigClockSource+0x194>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d809      	bhi.n	80047be <HAL_TIM_ConfigClockSource+0x9e>
 80047aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ae:	d027      	beq.n	8004800 <HAL_TIM_ConfigClockSource+0xe0>
 80047b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047b4:	d067      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ba:	d06d      	beq.n	8004898 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047bc:	e06d      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80047be:	4a3e      	ldr	r2, [pc, #248]	; (80048b8 <HAL_TIM_ConfigClockSource+0x198>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d060      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047c4:	4a3d      	ldr	r2, [pc, #244]	; (80048bc <HAL_TIM_ConfigClockSource+0x19c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d05d      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
 80047ca:	4a3d      	ldr	r2, [pc, #244]	; (80048c0 <HAL_TIM_ConfigClockSource+0x1a0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d05a      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80047d0:	e063      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6899      	ldr	r1, [r3, #8]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f000 fc71 	bl	80050c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	609a      	str	r2, [r3, #8]
      break;
 80047fe:	e04c      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6899      	ldr	r1, [r3, #8]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f000 fc5a 	bl	80050c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004822:	609a      	str	r2, [r3, #8]
      break;
 8004824:	e039      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	461a      	mov	r2, r3
 8004834:	f000 fbcc 	bl	8004fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2150      	movs	r1, #80	; 0x50
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fc25 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004844:	e029      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	461a      	mov	r2, r3
 8004854:	f000 fbeb 	bl	800502e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2160      	movs	r1, #96	; 0x60
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fc15 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004864:	e019      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6859      	ldr	r1, [r3, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	461a      	mov	r2, r3
 8004874:	f000 fbac 	bl	8004fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fc05 	bl	800508e <TIM_ITRx_SetConfig>
      break;
 8004884:	e009      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f000 fbfc 	bl	800508e <TIM_ITRx_SetConfig>
        break;
 8004896:	e000      	b.n	800489a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004898:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	00100020 	.word	0x00100020
 80048b8:	00100040 	.word	0x00100040
 80048bc:	00100070 	.word	0x00100070
 80048c0:	00100030 	.word	0x00100030

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <TIM_Base_SetConfig+0x104>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a39      	ldr	r2, [pc, #228]	; (80049cc <TIM_Base_SetConfig+0x108>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <TIM_Base_SetConfig+0x10c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a37      	ldr	r2, [pc, #220]	; (80049d4 <TIM_Base_SetConfig+0x110>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <TIM_Base_SetConfig+0x104>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <TIM_Base_SetConfig+0x108>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <TIM_Base_SetConfig+0x10c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <TIM_Base_SetConfig+0x110>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a26      	ldr	r2, [pc, #152]	; (80049dc <TIM_Base_SetConfig+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <TIM_Base_SetConfig+0x104>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00f      	beq.n	80049ac <TIM_Base_SetConfig+0xe8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <TIM_Base_SetConfig+0x110>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00b      	beq.n	80049ac <TIM_Base_SetConfig+0xe8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_Base_SetConfig+0xe8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <TIM_Base_SetConfig+0x118>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0xe8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d103      	bne.n	80049b4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	615a      	str	r2, [r3, #20]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800

080049e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 0302 	bic.w	r3, r3, #2
 8004a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <TIM_OC1_SetConfig+0x10c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00f      	beq.n	8004a64 <TIM_OC1_SetConfig+0x80>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <TIM_OC1_SetConfig+0x110>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_OC1_SetConfig+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <TIM_OC1_SetConfig+0x114>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_OC1_SetConfig+0x80>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a29      	ldr	r2, [pc, #164]	; (8004afc <TIM_OC1_SetConfig+0x118>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_OC1_SetConfig+0x80>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <TIM_OC1_SetConfig+0x11c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10c      	bne.n	8004a7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0308 	bic.w	r3, r3, #8
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 0304 	bic.w	r3, r3, #4
 8004a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <TIM_OC1_SetConfig+0x10c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <TIM_OC1_SetConfig+0xc2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <TIM_OC1_SetConfig+0x110>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_OC1_SetConfig+0xc2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <TIM_OC1_SetConfig+0x114>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <TIM_OC1_SetConfig+0xc2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <TIM_OC1_SetConfig+0x118>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_OC1_SetConfig+0xc2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <TIM_OC1_SetConfig+0x11c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d111      	bne.n	8004aca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40013400 	.word	0x40013400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800

08004b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0320 	bic.w	r3, r3, #32
 8004b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a28      	ldr	r2, [pc, #160]	; (8004c04 <TIM_OC2_SetConfig+0x100>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_OC2_SetConfig+0x6c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <TIM_OC2_SetConfig+0x104>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10d      	bne.n	8004b8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <TIM_OC2_SetConfig+0x100>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00f      	beq.n	8004bb4 <TIM_OC2_SetConfig+0xb0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <TIM_OC2_SetConfig+0x104>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <TIM_OC2_SetConfig+0xb0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <TIM_OC2_SetConfig+0x108>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_OC2_SetConfig+0xb0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <TIM_OC2_SetConfig+0x10c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_OC2_SetConfig+0xb0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <TIM_OC2_SetConfig+0x110>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d113      	bne.n	8004bdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40013400 	.word	0x40013400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <TIM_OC3_SetConfig+0xfc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_OC3_SetConfig+0x6a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <TIM_OC3_SetConfig+0x100>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10d      	bne.n	8004c9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <TIM_OC3_SetConfig+0xfc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_OC3_SetConfig+0xae>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <TIM_OC3_SetConfig+0x100>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_OC3_SetConfig+0xae>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <TIM_OC3_SetConfig+0x104>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_OC3_SetConfig+0xae>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <TIM_OC3_SetConfig+0x108>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_OC3_SetConfig+0xae>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <TIM_OC3_SetConfig+0x10c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d113      	bne.n	8004cee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40013400 	.word	0x40013400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	031b      	lsls	r3, r3, #12
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <TIM_OC4_SetConfig+0x100>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC4_SetConfig+0x6c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <TIM_OC4_SetConfig+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d10d      	bne.n	8004db0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	031b      	lsls	r3, r3, #12
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_OC4_SetConfig+0x100>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_OC4_SetConfig+0xb0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_OC4_SetConfig+0x104>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC4_SetConfig+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <TIM_OC4_SetConfig+0x108>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC4_SetConfig+0xb0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	; (8004e34 <TIM_OC4_SetConfig+0x10c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC4_SetConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <TIM_OC4_SetConfig+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d113      	bne.n	8004e00 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004de6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800

08004e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <TIM_OC5_SetConfig+0xb4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <TIM_OC5_SetConfig+0x7a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <TIM_OC5_SetConfig+0xb8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_OC5_SetConfig+0x7a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <TIM_OC5_SetConfig+0xbc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <TIM_OC5_SetConfig+0x7a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a14      	ldr	r2, [pc, #80]	; (8004efc <TIM_OC5_SetConfig+0xc0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_OC5_SetConfig+0x7a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <TIM_OC5_SetConfig+0xc4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d109      	bne.n	8004eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40013400 	.word	0x40013400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800

08004f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	051b      	lsls	r3, r3, #20
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <TIM_OC6_SetConfig+0xb8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00f      	beq.n	8004f80 <TIM_OC6_SetConfig+0x7c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <TIM_OC6_SetConfig+0xbc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_OC6_SetConfig+0x7c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <TIM_OC6_SetConfig+0xc0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_OC6_SetConfig+0x7c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <TIM_OC6_SetConfig+0xc4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_OC6_SetConfig+0x7c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <TIM_OC6_SetConfig+0xc8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d109      	bne.n	8004f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40013400 	.word	0x40013400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 030a 	bic.w	r3, r3, #10
 800500c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800502e:	b480      	push	{r7}
 8005030:	b087      	sub	sp, #28
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0210 	bic.w	r2, r3, #16
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800506a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80050a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f043 0307 	orr.w	r3, r3, #7
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	021a      	lsls	r2, r3, #8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	609a      	str	r2, [r3, #8]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2201      	movs	r2, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1a      	ldr	r2, [r3, #32]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	43db      	mvns	r3, r3
 800512a:	401a      	ands	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005168:	2302      	movs	r3, #2
 800516a:	e065      	b.n	8005238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2c      	ldr	r2, [pc, #176]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2b      	ldr	r2, [pc, #172]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d108      	bne.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d018      	beq.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d013      	beq.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a18      	ldr	r2, [pc, #96]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00e      	beq.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a17      	ldr	r2, [pc, #92]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d009      	beq.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a12      	ldr	r2, [pc, #72]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a13      	ldr	r2, [pc, #76]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d10c      	bne.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40013400 	.word	0x40013400
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40014000 	.word	0x40014000

08005258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005270:	2302      	movs	r3, #2
 8005272:	e087      	b.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d106      	bne.n	8005310 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1e      	ldr	r2, [pc, #120]	; (8005390 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d126      	bne.n	8005372 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	051b      	lsls	r3, r3, #20
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0e      	ldr	r2, [pc, #56]	; (8005390 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d106      	bne.n	8005372 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40013400 	.word	0x40013400

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4e0d      	ldr	r6, [pc, #52]	; (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 800539e:	1ba4      	subs	r4, r4, r6
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2500      	movs	r5, #0
 80053a4:	42a5      	cmp	r5, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4e0b      	ldr	r6, [pc, #44]	; (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <__libc_init_array+0x44>)
 80053ac:	f000 f820 	bl	80053f0 <_init>
 80053b0:	1ba4      	subs	r4, r4, r6
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2500      	movs	r5, #0
 80053b6:	42a5      	cmp	r5, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053c0:	4798      	blx	r3
 80053c2:	3501      	adds	r5, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ca:	4798      	blx	r3
 80053cc:	3501      	adds	r5, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08005418 	.word	0x08005418
 80053d4:	08005418 	.word	0x08005418
 80053d8:	08005418 	.word	0x08005418
 80053dc:	0800541c 	.word	0x0800541c

080053e0 <memset>:
 80053e0:	4402      	add	r2, r0
 80053e2:	4603      	mov	r3, r0
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d100      	bne.n	80053ea <memset+0xa>
 80053e8:	4770      	bx	lr
 80053ea:	f803 1b01 	strb.w	r1, [r3], #1
 80053ee:	e7f9      	b.n	80053e4 <memset+0x4>

080053f0 <_init>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr

080053fc <_fini>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr
